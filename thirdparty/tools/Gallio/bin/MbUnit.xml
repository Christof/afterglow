<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MbUnit</name>
  </assembly>
  <members>
    <member name="T:MbUnit.Core.MbUnitTestFrameworkExtension">
      <summary>A <see cref="T:Gallio.Framework.Pattern.IPatternTestFrameworkExtension" /> that registers MbUnit as a tool when the test assembly contains a reference to the MbUnit assembly.</summary>
    </member>
    <member name="M:MbUnit.Core.MbUnitTestFrameworkExtension.GetReferencedTools(Gallio.Reflection.IAssemblyInfo)">
      <summary>
        <para> Gets information about the tools that are used by the specified test assembly. The tool information will be included in the report as part of the framework node that contains the assembly. </para>
        <para> This method is used by authors of tools that are derived from the <see cref="T:Gallio.Framework.Pattern.PatternTestFramework" /> to provide brand and version information about the tool so that it will be visible to end users. </para>
        <para> If no tools are referenced by the assembly, it will be ignored by the <see cref="T:Gallio.Framework.Pattern.PatternTestExplorer" />. </para>
      </summary>
      <param name="assembly">The test assembly</param>
      <returns>The tool information</returns>
    </member>
    <member name="T:MbUnit.Framework.AnnotationAttribute">
      <summary>Associates an annotation message of the specified type with the code element.</summary>
    </member>
    <member name="T:MbUnit.Framework.ApartmentStateAttribute">
      <summary>
        <para> Sets the apartment state to be used to run the decorated test. </para>
        <para> If no apartment state is specified or if it is <see cref="F:System.Threading.ApartmentState.Unknown" /> the test will inherit the apartment state of its parent. Otherwise it will run in a thread with the specified apartment state. </para>
        <para> The test runner guarantees that the root test runs with the <see cref="F:System.Threading.ApartmentState.STA" /> apartment state. Consequently the apartment state only needs to be overridden to run a test in some mode that may differ from that which it would ordinarily inherit. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ApartmentStateAttribute.ApartmentState">
      <summary>Gets the apartment state to be used to run the decorated test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ApartmentStateAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.AssemblyFixtureAttribute">
      <summary>
        <para> The assembly fixture attribute is applied to a class that contains setup and teardown methods that are to be applied at the assembly level. Conceptually, the <see cref="T:MbUnit.Framework.AssemblyFixtureAttribute" /> adds new behavior to an assembly-level test fixture that contains all of the test fixtures within the assembly. </para>
        <para> The following attributes are typically used within an assembly fixture: <list type="bullet"><item><see cref="T:MbUnit.Framework.FixtureSetUpAttribute" />: Performs setup activities before any test fixtures within the assembly are executed.</item><item><see cref="T:MbUnit.Framework.FixtureTearDownAttribute" />: Performs teardown activities after all test fixtures within the assembly are executed.</item><item><see cref="T:MbUnit.Framework.SetUpAttribute" />: Performs setup activities before each test fixture within the assembly is executed.</item><item><see cref="T:MbUnit.Framework.TearDownAttribute" />: Performs teardown activities after eacj test fixture within the assembly is executed.</item></list></para>
        <para> It is also possible to use other attributes as with an ordinary <see cref="T:MbUnit.Framework.TestFixtureAttribute" />. An assembly fixture also supports data binding. When data binding is used on an assembly fixture, it will cause all test fixtures within the assembly to run once for each combination of data values used. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
        <para> Consumes a code element and applies its contributions to the scope provided by a containing pattern. </para>
        <para> This method is used to declare new tests, test parameters and other components and add them to a containing test that was defined in some other scope. </para>
        <para> For example, when enumerating test fixtures, the assembly-level pattern will call the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of the primary patterns associated with each type in an assembly. Some of these patterns will create new test fixture objects and add them as children of the containing assembly-level test. They will then call the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)" /> method of each non-primary pattern associated with the type within the scope of the test fixture. Then they will typically recurse into the fixture to apply contributions defined by patterns associated with methods, fields, properties, events, constructors and generic type parameters. </para>
      </summary>
      <param name="containingScope">The containing scope</param>
      <param name="codeElement">The code element to process</param>
      <param name="skipChildren">If true, skips generating child tests. Instead the children may be populated on demand using <see cref="P:Gallio.Framework.Pattern.PatternEvaluationScope.PopulateChildrenChain" />. The implementation may safely ignore the value of this flag so long as subsequent attempts to populate children on demand are idempotent (do nothing or have no adverse side-effects).</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.SetTestSemantics(Gallio.Framework.Pattern.PatternTest,Gallio.Reflection.ITypeInfo)">
      <summary>
        <para> Applies semantic actions to the <see cref="P:Gallio.Framework.Pattern.PatternTest.TestActions" /> member of a test to set the test's runtime behavior. </para>
        <para> This method is called after <see cref="M:Gallio.Framework.Pattern.TestTypePatternAttribute.InitializeTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ITypeInfo)" />. </para>
      </summary>
      <param name="test">The test</param>
      <param name="type">The test type</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ITypeInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="type">The type</param>
    </member>
    <member name="T:MbUnit.Framework.AssemblyResolverAttribute">
      <summary>Registers a custom assembly resolver. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.AssemblyResolverAttribute.AssemblyResolverType">
      <summary>Gets the assembly resolver type.</summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyResolverAttribute.Initialize(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IAssemblyInfo)">
      <summary>Performs early initialization for the specified assembly.</summary>
      <param name="frameworkScope">The framework-level scope that will eventually contain the assembly-level test</param>
      <param name="assembly">The assembly to process</param>
    </member>
    <member name="T:MbUnit.Framework.Assert">
      <summary>
        <para> Defines a set of assertions. </para>
        <para> Each assertion is generally provided in at least 4 flavors distinguished by overloads: <list type="bullet"><item>A simple form that takes only the assertion parameters.</item><item>A simple form that accepts a custom message format string and arguments in addition to the assertion parameters.</item><item>A rich form that takes the assertion parameters and a custom comparer object.</item><item>A rich form that accepts a custom message format string and arguments in addition to the assertion parameters and a custom comparer object.</item></list></para>
        <para> The value upon which the assertion is being evaluated is usually called the "actual value". Other parameters for the assertion are given names such as the "expected value", "unexpected value", or other terms as appropriate. In some cases where the role of a parameter is ambiguous, we may use designations such as "left" and "right" to distinguish the parameters. </para>This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.Assert.Over">
      <summary>Provides methods for composing assertions to map over complex data structures.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal and in the same order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that expected and actual sequences have the same number of elements and that the elements are equal but perhaps in a different order.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedSequence">The expected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that unexpected and actual sequences differ in at least one element.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedSequence">The unexpected sequence</param>
      <param name="actualSequence">The actual sequence</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.String,System.String,System.StringComparison)">
      <summary>Asserts that two strings are equal according to a particular string comparison mode.</summary>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.String,System.String,System.StringComparison,System.String,System.Object[])">
      <summary>Asserts that two strings are equal according to a particular string comparison mode.</summary>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0)">
      <summary>Verifies that an actual value equals some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value equals some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that an actual value equals some expected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value does not equal some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean})">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,Gallio.Func{``0,``0,System.Boolean},System.String,System.Object[])">
      <summary>Verifies that an actual value does not equal some unexpected value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.String,System.String,System.StringComparison)">
      <summary>Asserts that two strings are not equal according to a particular string comparison mode.</summary>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.String,System.String,System.StringComparison,System.String,System.Object[])">
      <summary>Asserts that two strings are not equal according to a particular string comparison mode.</summary>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="comparisonType">The string comparison type</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0)">
      <summary>Verifies that an actual value does not equal some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame``1(``0,``0)">
      <summary>Verifies that an actual value is not referentially identical to some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value is not referentially identical to some unexpected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame``1(``0,``0)">
      <summary>Verifies that an actual value is referentially identical to some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an actual value is referentially identical to some expected value.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="expectedValue">The expected value</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0)">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.String,System.Object[])">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Comparison{``0})">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that a test value is between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String)">
      <summary>Verifies that a string contains some expected value.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedSubstring">The expected substring</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string contains some expected value.</summary>
      <param name="actualValue">The actual value</param>
      <param name="expectedSubstring">The expected substring</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Asserts that <paramref name="expectedValue" /> is in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="expectedValue">The expected value expected to be found in the collection</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
      <summary>Asserts that <paramref name="expectedValue" /> is in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="expectedValue">The expected value expected to be found in the collection</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>Asserts that <paramref name="expectedKey" /> is in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="expectedKey">The key expected to be found in the dictionary</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
      <summary>Asserts that <paramref name="expectedKey" /> is in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="expectedKey">The key expected to be found in the dictionary</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain(System.String,System.String)">
      <summary>Verifies that a string does not contain some unexpected substring.</summary>
      <param name="actualValue">The actual value</param>
      <param name="unexpectedSubstring">The unexpected substring</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that a string does not contain some unexpected substring.</summary>
      <param name="actualValue">The actual value</param>
      <param name="unexpectedSubstring">The unexpected substring</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Asserts that <paramref name="unexpectedValue" /> is not in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="unexpectedValue">The unexpected value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
      <summary>Asserts that <paramref name="unexpectedValue" /> is not in the enumeration <paramref name="enumeration" />.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="enumeration">The enumeration of items</param>
      <param name="unexpectedValue">The unexpected value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>Asserts that <paramref name="unexpectedKey" /> is not in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="unexpectedKey">The key that should not be found in the dictionary</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
      <summary>Asserts that <paramref name="unexpectedKey" /> is not in the dictionary <paramref name="dictionary" />.</summary>
      <typeparam name="TKey">The type of key</typeparam>
      <typeparam name="TValue">The type of value</typeparam>
      <param name="dictionary">The dictionary of items</param>
      <param name="unexpectedKey">The key expected to be found in the dictionary</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotThrow(Gallio.Action)">
      <summary>Evaluates an action delegate and verifies that it does not throw an exception of any type.</summary>
      <param name="action">The action delegate to evaluate</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotThrow(Gallio.Action,System.String,System.Object[])">
      <summary>Evaluates an action delegate and verifies that it does not throw an exception of any type.</summary>
      <param name="action">The action delegate to evaluate</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.EndsWith(System.String,System.String)">
      <summary>Verifies that testValue ends with the specified pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="pattern">Regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.EndsWith(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that testValue ends with the specified pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="pattern">Regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail">
      <summary>Signals an assertion failure.</summary>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String,System.Object[])">
      <summary>Signals an assertion failure with a particular message.</summary>
      <param name="messageFormat">The format of the assertion failure message</param>
      <param name="messageArgs">The arguments for the assertion failure message format string</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String)">
      <summary>Verifies that testValue matches regular expression pattern exactly.</summary>
      <param name="testValue">The test value</param>
      <param name="regexPattern">Regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that testValue matches regular expression pattern exactly.</summary>
      <param name="testValue">The test value</param>
      <param name="regexPattern">Regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that testValue matches regular expression pattern exactly.</summary>
      <param name="testValue">The test value</param>
      <param name="regEx">Regular expression</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that testValue matches regular expression pattern exactly.</summary>
      <param name="testValue">The test value</param>
      <param name="regEx">Regular expression</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0)">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is greater than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0)">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is greater or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Inconclusive">
      <summary>Signals that a test has yielded an inconclusive result.</summary>
      <exception cref="T:Gallio.Framework.TestInconclusiveException">Thrown always</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
      <summary>Signals that a test has yielded an inconclusive result.</summary>
      <param name="messageFormat">The custom message format string, or null if none</param>
      <param name="messageArgs">The custom message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.TestInconclusiveException">Thrown always</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable)">
      <summary>Verifies that an actual value contains no elements.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
      <summary>Verifies that an actual value contains no elements.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean)">
      <summary>Verifies that an actual value is false.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>Verifies that an actual value is false.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
      <summary>Verifies that an actual value is an instance of some expected type.</summary>
      <param name="expectedType">The expected type</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is an instance of some expected type.</summary>
      <param name="expectedType">The expected type</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expectedType">The Type to compare with the object's Type</param>
      <param name="actualValue">The object under examination</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable)">
      <summary>Verifies that an actual value contains at least one element.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
      <summary>Verifies that an actual value contains at least one element.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
      <summary>Verifies that an actual value is not an instance of some unexpected type.</summary>
      <param name="unexpectedType">The unexpected type</param>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is not an instance of some unexpected type.</summary>
      <param name="unexpectedType">The unexpected type</param>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object)">
      <summary>Verifies that an actual value is not null.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is not null.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object)">
      <summary>Verifies that an actual value is null.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that an actual value is null.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean)">
      <summary>Verifies that an actual value is true.</summary>
      <param name="actualValue">The actual value</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>Verifies that an actual value is true.</summary>
      <param name="actualValue">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0)">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is less than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0)">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.String,System.Object[])">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Comparison{``0})">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that an left value is less or equal than right value according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="left">The expected value</param>
      <param name="right">The actual value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String)">
      <summary>Verifies that testValue matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regexPattern">Regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that testValue matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regexPattern">Regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that testValue matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regEx">Regular expression</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that testValue matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regEx">Regular expression</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Multiple(Gallio.Action)">
      <summary>
        <para> Executes an action delegate that contains multiple related assertions. </para>
        <para> While the delegate runs, the behavior of assertions is change such that failures are captured but do not cause a <see cref="T:Gallio.Framework.Assertions.AssertionFailureException" /> to be throw. When the delegate returns, the previous assertion failure behavior is restored and any captured assertion failures are reported. The net effect of this change is that the test can continue to run even after an assertion failure occurs which can help to provide more information about the problem. </para>
      </summary>
      <param name="action">The action to invoke</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Multiple(Gallio.Action,System.String,System.Object[])">
      <summary>
        <para> Executes an action delegate that contains multiple related assertions. </para>
        <para> While the delegate runs, the behavior of assertions is change such that failures are captured but do not cause a <see cref="T:Gallio.Framework.Assertions.AssertionFailureException" /> to be throw. When the delegate returns, the previous assertion failure behavior is restored and any captured assertion failures are reported. The net effect of this change is that the test can continue to run even after an assertion failure occurs which can help to provide more information about the problem. </para>
        <para> If the block throws an exception other than an assertion failure, then it is similarly recorded. </para>
      </summary>
      <param name="action">The action to invoke</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0)">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.String,System.Object[])">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Comparison{``0})">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>Verifies that a test value is not between left and right values according to a particular comparer.</summary>
      <typeparam name="T">The type of value</typeparam>
      <param name="actualValue">The actual value</param>
      <param name="minimum">Inclusive minimum value</param>
      <param name="maximum">Inclusive maximum value</param>
      <param name="comparer">The comparer to use, or null to use the default one</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String)">
      <summary>Verifies that testValue doesn't matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regexPattern">Regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that testValue doesn't matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regexPattern">Regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Verifies that testValue doesn't matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regEx">Regular expression</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>Verifies that testValue doesn't matches regular expression pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="regEx">Regular expression</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.StartsWith(System.String,System.String)">
      <summary>Verifies that testValue starts with the specified pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="pattern">Regular expression pattern</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.StartsWith(System.String,System.String,System.String,System.Object[])">
      <summary>Verifies that testValue starts with the specified pattern.</summary>
      <param name="testValue">The test value</param>
      <param name="pattern">Regular expression pattern</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``1(Gallio.Action)">
      <summary>Evaluates an action delegate and verifies that it throws an exception of a particular type.</summary>
      <typeparam name="TExpectedException">The expected type of exception</typeparam>
      <param name="action">The action delegate to evaluate</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``1(Gallio.Action,System.String,System.Object[])">
      <summary>Evaluates an action delegate and verifies that it throws an exception of a particular type.</summary>
      <typeparam name="TExpectedException">The expected type of exception</typeparam>
      <param name="action">The action delegate to evaluate</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,Gallio.Action)">
      <summary>Evaluates an action delegate and verifies that it throws an exception of a particular type.</summary>
      <param name="expectedExceptionType">The expected exception type</param>
      <param name="action">The action delegate to evaluate</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" /> or <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,Gallio.Action,System.String,System.Object[])">
      <summary>Evaluates an action delegate and verifies that it throws an exception of a particular type.</summary>
      <param name="expectedExceptionType">The expected exception type</param>
      <param name="action">The action delegate to evaluate</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <returns>The exception that was thrown</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" /> or <paramref name="action" /> is null</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="T:MbUnit.Framework.AssertOverSyntax">
      <summary>Defines methods used with the <see cref="P:MbUnit.Framework.Assert.Over" /> syntax for mapping assertions over complex data structures. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``1,``2})">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the left value as first argument, and right value as second</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``0,``1,``2})">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the key as first argument, left value as second, and right value as third</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``1,``2},System.String,System.Object[])">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the left value as first argument, and right value as second</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``0,``1,``2},System.String,System.Object[])">
      <summary>Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TLeftValue">The expected value type</typeparam>
      <typeparam name="TRightValue">The expected value type</typeparam>
      <param name="leftDictionary">The left dictionary, or null</param>
      <param name="rightDictionary">The right dictionary, or null</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the key as first argument, left value as second, and right value as third</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.Pairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Action{``0,``1})">
      <summary>Evaluates an assertion over pairs of values taken from two sequences. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TLeftValue">The left value type</typeparam>
      <typeparam name="TRightValue">The right value type</typeparam>
      <param name="leftSequence">The left sequence, or null</param>
      <param name="rightSequence">The right sequence, or null</param>
      <param name="assertion">The assertion to evaluate given a left value and a right value</param>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.Pairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Action{``0,``1},System.String,System.Object[])">
      <summary>Evaluates an assertion over pairs of values taken from two sequence. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TLeftValue">The left value type</typeparam>
      <typeparam name="TRightValue">The right value type</typeparam>
      <param name="leftSequence">The left sequence, or null</param>
      <param name="rightSequence">The right sequence, or null</param>
      <param name="assertion">The assertion to evaluate given a left value and a right value</param>
      <param name="messageFormat">The custom assertion message format, or null if none</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none</param>
    </member>
    <member name="T:MbUnit.Framework.AuthorAttribute">
      <summary>Associates the author's name and email address with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorEmail">
      <summary>Gets or sets the author's email address or an empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorHomepage">
      <summary>Gets or sets the author's homepage or an empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorName">
      <summary>Gets or sets the author's name.</summary>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.BindAttribute">
      <summary>The bind attribute overrides the default binding rules for a test parameter by specifying a different data source, a binding path or an index. At most one such attribute may appear on any given test parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Index">
      <summary>Gets the binding index, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Path">
      <summary>Gets the binding path, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Source">
      <summary>
        <para> Gets or sets the name of the data source to bind, or null to bind the default data source for the test parameter. </para>
        <para> The default source for a test parameter is the anonymous data source defined within the scope of the test parameter or by its enclosing test. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.BindAttribute.DecorateTestParameter(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ISlotInfo)">
      <summary>
        <para> Applies decorations to a <see cref="T:Gallio.Framework.Pattern.PatternTestParameter" />. </para>
        <para> A typical use of this method is to augment the test parameter with additional metadata or to add additional behaviors to the test parameter. </para>
      </summary>
      <param name="slotScope">The slot scope</param>
      <param name="slot">The slot</param>
    </member>
    <member name="T:MbUnit.Framework.CategoryAttribute">
      <summary>Associates a category name with a test fixture, test method, test parameter or other test component. The category name can be used to classify tests and build test suites of related tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.CategoryAttribute.CategoryName">
      <summary>Gets the category name.</summary>
    </member>
    <member name="M:MbUnit.Framework.CategoryAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.ColumnAttribute">
      <summary>
        <para> Provides a column of literal values as a data source. </para>
        <para> This attribute is equivalent to providing a sequence of values using <see cref="T:MbUnit.Framework.RowAttribute" /> with 1 element in each. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ColumnAttribute.Values">
      <summary>Gets the array of values in the column.</summary>
    </member>
    <member name="M:MbUnit.Framework.ColumnAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.CombinatorialJoinAttribute">
      <summary>
        <para> Sets the join strategy of a test to be combinatorial. </para>
        <para> The test will be executed using all possible combinations of values from each data source. </para>
        <para> If there are two data sources, A and B with values A1, A2, B1 and B2, then the test will be run four times with inputs: (A1, B1), (A1, B2), (A2, B1) and (A2, B2). </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.CombinatorialJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.ContentAttribute">
      <summary>An abstract base class for data source attributes that obtain contents from a local file, manifest resource, or inline data. At most one location type may be used. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.Contents">
      <summary>Gets or sets the inline data contents as a string.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.FilePath">
      <summary>Gets or sets the path of a local file relative to the current working directory from which the file contents should be read.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.IsDynamic">
      <summary>Returns true if the contents are dynamic, or false if they are static. Static contents can only change if the test assembly is recompiled.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourcePath">
      <summary>
        <para> Gets or sets the path of a manifest resource from which the contents should be read. The path will be resolved within the assembly containing the <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" /> type or the test fixture type if none if provided. </para>
        <para> During resolution, a resource name is constructed from the resource path by translating backslashes to periods. If the named resource is found within the scoped assembly manifest, it is used. Otherwise, the name is prepended with the scoped type's namespace and second lookup is attempted. If this final attempt fails, then an error is raised at runtime. </para>
        <para> Examples: <list type="bullet"><item>If the <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" nolink="true" /> is <c>MyNamespace.MyType</c> within assembly <c>MyAssembly.dll</c> and if <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> is <c>"Resources\Image.gif"</c>, then resolution will first check whether <c>Resources.Image.gif</c> in <c>MyAssembly.dll</c> is a valid resource. If not found, it will consider <c>MyNamespace.Resources.Image.gif</c>. If still not found, then a runtime error will be raised.</item><item>If no <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" nolink="true" /> is provided, then the containing test fixture type will be used as the resource scope. The above resolution strategy still applies.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourceScope">
      <summary>
        <para> Gets or sets a <see cref="T:System.Type" /> that is used to locate the assembly and namespace within which to resolve a manifest resource in combination with the <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> property. </para>
        <para> If no value is specified, the test fixture type is used as the resource scope. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.GetDataLocationName">
      <summary>
        <para> Gets the name of the location that is providing the data, or null if none. </para>
        <para> The name will be the filename or resource path if specified, or a special locale-aware string (such as "&lt;inline&gt;") if the contents were specified inline via the <see cref="P:MbUnit.Framework.ContentAttribute.Contents" /> property. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenStream(Gallio.Reflection.ICodeElementInfo)">
      <summary>Opens the contents as a stream.</summary>
      <param name="codeElement">The code element to which the attribute was applied</param>
      <returns>The stream</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenTextReader(Gallio.Reflection.ICodeElementInfo)">
      <summary>Opens the contents as a text reader.</summary>
      <param name="codeElement">The code element to which the attribute was applied</param>
      <returns>The text reader</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.CsvDataAttribute">
      <summary>
        <para> Provides data from Comma Separated Values contents. </para>
        <para> If the CSV document has a header, then it is interpreted as the names of the columns. Columns with names in brackets, such as "[ExpectedException]", are interpreted as containing metadata values associated with the named key. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.CommentPrefix">
      <summary>
        <para> Gets or sets a character that indicates that a line in the source represents a comment. May be set to '\0' (null) to disable comment handling. </para>
        <para> Comment lines are excluded from the record set. </para>
      </summary>
      <value>The default value is '#' (pound).</value>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.FieldDelimiter">
      <summary>Gets or sets the field delimiter character.</summary>
      <value>The default value is ',' (comma).</value>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.HasHeader">
      <summary>Gets or sets whether the CSV document has a header that should be used to provide aliases for indexed columns.</summary>
      <value>The default value is 'false' which indicates that the file does not have a header.</value>
    </member>
    <member name="M:MbUnit.Framework.CsvDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.DataAttribute">
      <summary>The abstract base type for MbUnit attributes that contribute values to data sources along with metadata such a description or expected exception type. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.Description">
      <summary>Gets or sets a description of the values provided by the data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.ExpectedException">
      <summary>Gets or sets the type of exception that should be thrown when the values provided by the data source are consumed by test.</summary>
    </member>
    <member name="M:MbUnit.Framework.DataAttribute.GetMetadata">
      <summary>Gets the metadata for the data source.</summary>
      <returns>The metadata keys and values</returns>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAssemblyAttribute">
      <summary>Creates a dependency from this test assembly, test fixture or test method on all tests in some other test assembly. If any test in the other test assembly test fails then this test will not run. Moreover, the dependency forces this test to run after those it depends upon.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAssemblyAttribute.TestAssemblyName">
      <summary>Gets the dependent test assembly name.</summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAssemblyAttribute.GetDependency(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Gets the code element that declares the tests on which this test should depend.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <returns>The code element representing the dependency</returns>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAttribute">
      <summary>Creates a dependency from this test assembly, test fixture or test method on some other test fixture or test method. If the other test fixture or test method fails then this test will not run. Moreover, the dependency forces this test to run after those it depends upon.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestFixtureType">
      <summary>Gets the dependent test fixture type, or null if the dependency is on another test method of this test fixture.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestMethodName">
      <summary>Gets the dependent test method name, or null if the dependency is on the whole test fixture.</summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.GetDependency(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Gets the code element that declares the tests on which this test should depend.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <returns>The code element representing the dependency</returns>
    </member>
    <member name="T:MbUnit.Framework.DescriptionAttribute">
      <summary>Associates a description with a test fixture, test method, test parameter or other test component. The description provides useful documentation to users when browsing the tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.DescriptionAttribute.Description">
      <summary>Gets or sets the description.</summary>
    </member>
    <member name="M:MbUnit.Framework.DescriptionAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentException" />. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentNullException" />. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentOutOfRangeExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an exception of a particular type. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
      <summary>Gets the expected exception type.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.Message">
      <summary>Gets or sets the expected exception message, or null if none specified.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.DecorateMethodTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies decorations to a method-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="methodScope">The method scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.ExplicitAttribute">
      <summary>
        <para> Indicates that a test should only be run explicitly. The test will still appear in the test tree but it will not run and it will not appear in the test results unless it is explicitly selected for execution. </para>
        <para> A test is considered to be explicitly selected when the filter used to run the tests matches the test or its descendants but none of its ancestors. For example, if the filter matches a test case but not its containing test fixture then the test case will be deemed to be explicitly selected. Otherwise the test case will be implicitly selected by virtue of the fact that the filter matched one of its ancestors. </para>
        <para> This attribute can be used to exclude from normal execution any tests that are particularly expensive or require manual supervision by an operator. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ExplicitAttribute.Reason">
      <summary>Gets the reason that the test should only run explicitly.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.FactoryAttribute">
      <summary>
        <para> Specifies a factory member that will provide values for a data-driven test. The factory may be an instance or static member of the fixture class or a static member of some other class. </para>
        <para> Refer to <see cref="T:Gallio.Framework.Data.FactoryDataSet" /> and <see cref="T:Gallio.Framework.Data.FactoryKind" /> for more information about how the factory data set works and the kinds of factories that are supported. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.ColumnCount">
      <summary>Gets or sets the number of columns produced by the factory, or 0 if unknown. Defaults to 0.</summary>
      <value>The number of columns</value>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is less than zero</exception>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Kind">
      <summary>Gets or sets the kind of the factory. Defaults to <see cref="F:Gallio.Framework.Data.FactoryKind.Auto" />.</summary>
      <value>The kind of the factory.</value>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.MemberName">
      <summary>Gets the factory member name, never null.</summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Type">
      <summary>Gets the declaring type of the factory, or null if it is assumed to be the fixture class.</summary>
    </member>
    <member name="M:MbUnit.Framework.FactoryAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureInitializerAttribute">
      <summary>
        <para> The fixture initializer attribute is applied to a method that is to be invoked after a fixture instance has been created to complete its initialization. </para>
        <para> This attribute provides a mechanism for completing the initialization of a fixture if the work cannot be completed entirely within the constructor. For example, data binding might be used to set fields and property values of the fixture instance. Consequently post-construction initialization may be required. </para>
        <para>
          <see cref="T:MbUnit.Framework.FixtureInitializerAttribute" /> allows initialization to occur earlier in the test lifecycle than <see cref="T:MbUnit.Framework.FixtureSetUpAttribute" />. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.DecorateContainingScope(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing <see cref="T:Gallio.Framework.Pattern.PatternTest" />.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureSetUpAttribute">
      <summary>The fixture set up attribute is applied to a method that is to be invoked when a fixture instance is being set up before any of its tests are executed.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.DecorateContainingScope(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing <see cref="T:Gallio.Framework.Pattern.PatternTest" />.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureTearDownAttribute">
      <summary>The fixture tear down attribute is applied to a method that is to be invoked when a fixture instance is being torn down after all of its tests have been executed.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.DecorateContainingScope(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing <see cref="T:Gallio.Framework.Pattern.PatternTest" />.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="T:MbUnit.Framework.HeaderAttribute">
      <summary>Defines names as aliases for the columns in an indexed data source such as those that have been populated by <see cref="T:MbUnit.Framework.RowAttribute" /> or <see cref="T:MbUnit.Framework.ColumnAttribute" />. The names may subsequently be used in data binding expressions in place of their corresponding column indices.</summary>
    </member>
    <member name="P:MbUnit.Framework.HeaderAttribute.ColumnNames">
      <summary>Gets the array of column names.</summary>
    </member>
    <member name="M:MbUnit.Framework.HeaderAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.IgnoreAttribute">
      <summary>
        <para> Indicates that a test is to be ignored by the framework and will not be run. The test will still appear in test reports along with the reason that it was ignored, if provided. </para>
        <para> This attribute can be used to disable tests that are broken or expensive without commenting them out or removing them from the source code. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.IgnoreAttribute.Reason">
      <summary>Gets the reason that the test has been ignored, or an empty string if none.</summary>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ImportanceAttribute">
      <summary>Associates a <see cref="T:MbUnit.Framework.Importance" /> with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.ImportanceAttribute.Importance">
      <summary>Gets or sets the importance.</summary>
    </member>
    <member name="M:MbUnit.Framework.ImportanceAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.JoinAttribute">
      <summary>An abstract class for attributes that specify the join strategy of a test. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Processes a code element and applies contributes to the scope of this pattern. The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of a primary pattern applied to this code element. </para>
        <para> This method is used by patterns to decorate tests and test parameters that have been declared by primary patterns. </para>
        <para> For example, the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)" /> method will typically be called by another pattern that has just created a new test based on the associated code element, such as a test method. The method then has the opportunity to modify the test to add metadata, change its name, add new behaviors, and so on. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element to process</param>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.MetadataAttribute">
      <summary>Associates custom metadata with a test fixture, test method, test parameter or other test component. The metadata can be used for documentation, classification or dynamic customization of tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataKey">
      <summary>Gets the metadata key.</summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataValue">
      <summary>Gets the metadata value.</summary>
    </member>
    <member name="M:MbUnit.Framework.MetadataAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.MultipleAssertsAttribute">
      <summary>Runs the test as if it were surrounded by <see cref="M:MbUnit.Framework.Assert.Multiple(Gallio.Action)" /> so that multiple assertion failures within the test are tolerated. When an assertion failure occurs, it is reported but the test is allowed to proceed until it completes or throws an unhandled exception. When the test finishes, it will still be marked as failed, as usual.</summary>
    </member>
    <member name="M:MbUnit.Framework.MultipleAssertsAttribute.DecorateMethodTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies decorations to a method-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="methodScope">The method scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.NameAttribute">
      <summary>Overrides the name of a test or test parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.NameAttribute.Name">
      <summary>Gets the overridden name.</summary>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Processes a code element and applies contributes to the scope of this pattern. The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of a primary pattern applied to this code element. </para>
        <para> This method is used by patterns to decorate tests and test parameters that have been declared by primary patterns. </para>
        <para> For example, the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)" /> method will typically be called by another pattern that has just created a new test based on the associated code element, such as a test method. The method then has the opportunity to modify the test to add metadata, change its name, add new behaviors, and so on. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element to process</param>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.PairwiseJoinAttribute">
      <summary>
        <para> Sets the join strategy of a test to be pairwise. </para>
        <para> The test will be executed using values drawn from each data source and combined so that all possible pairings of values from each data source are produced. This constraint vastly reduces the number of combinations because we only consider all interactions among pairs of variables rather than among all variables at once. This strategy still provides a high degree of variability among combinations and has a high likelihood of finding bugs while incurring much less cost than testing all possible combinations. </para>
        <para> If there are three data sources, A, B and C with values A1, A2, B1, B2, C1 and C2 then the test will be run four times with inputs: (A1, B1, C1), (A2, B2, C1), (A1, B2, C2), (A2, B1, C2). Compare this with the eight times that a standard cross-product combinatorial join strategy would have required. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.PairwiseJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.ParameterAttribute">
      <summary>
        <para> Declares that a property, field, method parameter, constructor parameter, generic type parameter or generic method parameter represents a test parameter. </para>
        <para> This attribute is optional for a method parameter, constructor parameter, generic type parameter or generic method parameter. For a property or field, this attribute is required unless the property or field has at least one associated data source, in which case the attribute can be omitted. </para>
      </summary>
    </member>
    <member name="T:MbUnit.Framework.PendingAttribute">
      <summary>
        <para> Indicates that a test has pending prerequisites so it will not be run. The test will still appear in test reports along with an explanation of the reason it it pending, if provided. </para>
        <para> This attribute can be used to disable tests that cannot run because the subject under test is missing certain prerequisite functionality. It may also serve as a placeholder for test that have yet to be implemented. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.PendingAttribute.Reason">
      <summary>Gets the reason that the test is pending.</summary>
    </member>
    <member name="M:MbUnit.Framework.PendingAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RepeatAttribute">
      <summary>This attribute decorates a test method and causes it to be invoked repeatedly.</summary>
    </member>
    <member name="M:MbUnit.Framework.RepeatAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RollbackAttribute">
      <summary>
        <para> Tags a test method whose database operation must be executed within a transaction and rolled back when it has finished executing. </para>
        <para> By default, the attribute does not rollback changes performed during SetUp and TearDown. Set the <see cref="P:MbUnit.Framework.RollbackAttribute.IncludeSetUpAndTearDown" /> to <c>true</c> to change this. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.RollbackAttribute.IncludeSetUpAndTearDown">
      <summary>
        <para> When set to true, includes setup and teardown in the rollback. Otherwise only transactions performed during the test itself are affected. </para>
        <para> The fixture setup and teardown is not included regardless unless this attribute is applied to the fixture class itself instead of the test method. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.RollbackAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RowAttribute">
      <summary>Provides a row of literal values as a data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.RowAttribute.Values">
      <summary>Gets the array of values in the row.</summary>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.SequentialJoinAttribute">
      <summary>
        <para> Sets the join strategy of a test to be sequential. </para>
        <para> The test will be executed using values drawn from each data source and combined sequentially with elements from each data source chosen in order. </para>
        <para> If there are two data sources, A and B with values A1, A2, B1 and B2, then the test will be run twice with inputs: (A1, B1) and (A2, B2). </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.SetUpAttribute">
      <summary>The setup attribute is applied to a method that is to be invoked before each test in a fixture executes. The method will run once for each test. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.TearDownAttribute">
      <summary>The tear down attribute is applied to a method that is to be invoked after each test in a fixture executes. The method will run once for each test. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestAttribute">
      <summary>
        <para> The test attribute is applied to a method that represents a single test case within a fixture. By default, if the method throws an unexpected exception, the test will be deemed to have failed. Otherwise, the test will pass. </para>
        <para> The default behavior may be modified by test decorator attributes that may alter the execution environment of the test, catch and reinterpret any exceptions it throws, or impose additional constraints upon its execution. </para>
        <para> Output from the test, such as text written to the console, is captured by the framework and will be included in the test report. Additional information can also be logged during test execution using the <see cref="T:Gallio.Framework.TestLog" /> class. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.TestAttribute.SetTestSemantics(Gallio.Framework.Pattern.PatternTest,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies semantic actions to the <see cref="P:Gallio.Framework.Pattern.PatternTest.TestActions" /> member of a test to set the test's runtime behavior. </para>
        <para> This method is called after <see cref="M:Gallio.Framework.Pattern.TestMethodPatternAttribute.InitializeTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)" />. </para>
      </summary>
      <param name="test">The test</param>
      <param name="method">The test method</param>
    </member>
    <member name="T:MbUnit.Framework.TestDecoratorAttribute">
      <summary>
        <para> A test decorator applies actions to be performed around the initialization, setup, execution, teardown and disposal lifecycle of a test (in that order). </para>
        <para> This abstract class provides a convenient way to implement new test decorators of your own. If you need more control over how the test is decorated, you may prefer subclassing <see cref="T:Gallio.Framework.Pattern.TestDecoratorPatternAttribute" /> directly instead. </para>
        <para> When multiple test decorators are applied to a test, they are installed in order according to the <see cref="P:Gallio.Framework.Pattern.DecoratorPatternAttribute.Order" /> property. </para>This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Dispose(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Disposes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Executes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Initialize(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Initializes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.SetUp(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Sets up the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.TearDown(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Tears down the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureAttribute">
      <summary>
        <para> The test fixture attribute is applied to a class that contains a suite of related test cases. If an error occurs while initializing the fixture or if at least one of the test cases within the fixture fails, then the fixture itself will be deemed to have failed. Otherwise the fixture will pass. Output from the fixture, such as text written to the console, is captured by the framework and will be included in the test report. </para>
        <para> A test fixture has a timeout of 10 minutes by default. This may be changed using the <see cref="T:MbUnit.Framework.TimeoutAttribute" />. </para>
      </summary>
    </member>
    <member name="T:MbUnit.Framework.TestsOnAttribute">
      <summary>Associates the name of the type under test with a test fixture, test method, test parameter or other test component. The type under test helps to describe which type is primarily being exercised by the test so that we can quickly identify which tests to run after making changes to a given type.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestsOnAttribute.TypeName">
      <summary>Gets the full name or assembly qualified name of the type under test.</summary>
      <value>The name of the type under test as obtained by <see cref="P:System.Type.FullName" /> or <see cref="P:System.Type.AssemblyQualifiedName" />.</value>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.ThreadedRepeatAttribute">
      <summary>This attribute decorates a test method and causes it to be invoked repeatedly on multiple concurrent threads.</summary>
    </member>
    <member name="M:MbUnit.Framework.ThreadedRepeatAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.TimeoutAttribute">
      <summary>Sets the maximum amount of time that a test or fixture is permitted to run.</summary>
    </member>
    <member name="P:MbUnit.Framework.TimeoutAttribute.TimeoutSeconds">
      <summary>Gets the timeout in seconds.</summary>
    </member>
    <member name="M:MbUnit.Framework.TimeoutAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.Importance">
      <summary>Specifies the test's relative importance which can be used for classifying tests to be executed.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Critical">
      <summary>Critical importance.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Severe">
      <summary>Severe importance. Less important than <see cref="F:MbUnit.Framework.Importance.Critical" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Serious">
      <summary>Serious importance. Less important than <see cref="F:MbUnit.Framework.Importance.Severe" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Default">
      <summary>Default importance.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.NoOneReallyCaresAbout">
      <summary>Not important.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1">
      <summary>
        <para> Contains a collection of equivalent object instances. All the elements of the collection should be equal together, in the sense of the local implementation of an equality contract (<see cref="T:System.IEquatable`1" />) or a comparison contract (<see cref="T:System.IComparable`1" />). </para>
        <para> Equivalent classes are used by some contract verifiers such as <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute" /> and <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute" /> to check for the correct implementation of object equality or comparison. </para>
      </summary>
      <typeparam name="T">The type of equivalent object instances.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.EquivalentInstances">
      <summary>Gets the collection of equivalent instances.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.GetEnumerator">
      <summary>Returns a strongly-typed enumerator that iterates through the collection.</summary>
      <returns>A strongly-typed enumerator</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1">
      <summary>
        <para> A collection of equivalence classes. </para>
        <para> Equivalent classes are used by some contract verifiers such as <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute" /> and <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute" /> to check for the correct implementation of object equality or comparison. </para>
        <para> You can construct and initialize a collection of equivalence classes either by using the constructor, or by using the factory method <see cref="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.FromDistinctInstances(`0[])" />: <list type="bullet"><item> Use the constructor when you want to create equivalence classes containing a variable number of object instances. <example><code>
            EquivalenceClassCollection&lt;Foo&gt; collection = new EquivalenceClassCollection&lt;Foo&gt;(
                new EquivalenceClass&lt;Foo&gt;(
                    new EquivalenceClass&lt;Foo&gt;(
                        new Foo(7, 2));
                    new EquivalenceClass&lt;Foo&gt;(
                        new Foo(25, 2), 
                        new Foo(10, 5));
                    new EquivalenceClass&lt;Foo&gt;(
                        new Foo(3, 4), 
                        new Foo(2, 6), 
                        new Foo(1, 12)));
            </code></example></item><item> Use the factory method in more simple scenarios, when the equivalence classes will only contain one single object instance. <example><code>
            EquivalenceClassCollection&lt;Foo&gt; collection = 
                EquivalenceClassCollection&lt;Foo&gt;.FromDistinctInstances(
                    new Foo(7, 2),
                    new Foo(5, 3), 
                    new Foo(3, 4));
            </code></example></item></list></para>
      </summary>
      <typeparam name="T">The type of equivalent object instances.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.EquivalenceClasses">
      <summary>Gets the equivalence classes.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.FromDistinctInstances(`0[])">
      <summary>
        <para> Constructs a collection of equivalence classes from the specified distinct object instances. The collection will contain one equivalence class for each of the distinct object instances provided. </para>
        <para> Equivalent classes are used by some contract verifiers such as <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute" /> and <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute" /> to check for the correct implementation of object equality or comparison. </para>
      </summary>
      <param name="distinctInstances">An array of distinct object instances</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.GetEnumerator">
      <summary>Returns a strongly-typed enumerator that iterates through the collection.</summary>
      <returns>A strongly-typed enumerator</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute">
      <summary>
        <para> Attribute for test fixtures that verify the implementation contract of a type implementing the generic <see cref="T:System.IComparable`1" /> interface. </para>
        <para> The test fixture must implement the <see cref="T:MbUnit.Framework.ContractVerifiers.IEquivalenceClassProvider`1" /> interface which provides a set of equivalence classes of distinct object instances to be used by the contract verifier. </para>
        <para> By default, the verifier will evaluate the behavior of the <see cref="M:System.IComparable`1.CompareTo(`0)" /> method. It will verify as well the good implementation of the four comparison operator overloads (Greater Than, Less Than, Greater Than Or Equal, and Less Than Or Equal). Use the named parameters <see cref="P:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute.ImplementsOperatorOverloads" /> to disable that verification. </para>
        <example>The following example declares a simple comparable "Foo" class and tests it using the comparison contract verifier. The Foo class has a contructor which takes one single Int32 argument, which is used internally by the class for the implementation of the comparison contract. <code>
             public class Foo : IComparable&lt;Foo&gt;
             {
                 private int value;
                 
                 public Foo(int value)
                 {
                     this.value = value;
                 }
             
                 public int CompareTo(Foo other) 
                 { 
                     return (other == null) ? Int32.MaxValue : value.CompareTo(other.value);
                 }
             
                 public static bool operator &gt;=(Foo left, Foo right)
                 {
                     return ((left == null) &amp;&amp; (right == null)) || ((left != null) &amp;&amp; (left.CompareTo(right) &gt;= 0));
                 }
            
                 public static bool operator &lt;=(Foo left, Foo right)
                 {
                     return (left == null) || (left.CompareTo(right) &lt;= 0);
                 }
            
                 public static bool operator &gt;(Foo left, Foo right)
                 {
                     return (left != null) &amp;&amp; (left.CompareTo(right) &gt; 0);
                 }
            
                 public static bool operator &lt;(Foo left, Foo right)
                 {
                     return ((left != null) || (right != null)) &amp;&amp; ((left == null) || (left.CompareTo(right) &lt; 0));
                 }
             }
             
             [VerifyComparisonContract(typeof(Foo))]
             public class FooTest : IEquivalenceClassProvider&lt;Foo&gt;
             {
                 public EquivalenceClassCollection&lt;Foo&gt; GetEquivalenceClasses()
                 {
                     return EquivalenceClassCollection&lt;Foo&gt;.FromDistinctInstances(
                         new Foo(1),
                         new Foo(2),
                         new Foo(5),
                         new Foo(36));
                 }
             }
             </code></example>
        <para> When testing a nullable type such as a reference type, or a value type decorated with <see cref="T:System.Nullable`1" />, it is not necessary to provide a null reference as an object instance to the constructor of the equivalence classes. The contract verifier will check for you that the tested type handles correctly with null references. In the scope of the comparison contract, it means that: <list type="bullet"><item>Any null reference should compare less than any non-null reference.</item><item>Two null references should compare equal.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute.ImplementsOperatorOverloads">
      <summary>
        <para> Determines whether the verifier will evaluate the presence and the behavior of the four comparison operator overloads. The default value is 'true'. </para> Built-in verifications: <list type="bullet"><item>The type has a static "greater than" operator overload which behaves correctly against the provided equivalence classes.</item><item>The type has a static "less than" operator overload which behaves correctly against the provided equivalence classes.</item><item>The type has a static "greater than or equal" operator overload which behaves correctly against the provided equivalence classes.</item><item>The type has a static "less than or equal" operator overload which behaves correctly against the provided equivalence classes.</item></list></summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute.GetPatternTestBuilders">
      <summary>Provides builders of pattern tests for the contract verifier.</summary>
      <returns>An enumeration of pattern test builders.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute">
      <summary>Abstract attribute to qualify test fixtures that verify implementation contracts. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.TargetType">
      <summary>Gets the type of the object to verify.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.GetInterface(System.Type,System.Type)">
      <summary>Gets the interface of a particular type if it is implemented by another type, otherwise returns null.</summary>
      <param name="implementationType">The implementation type</param>
      <param name="interfaceType">The interface type</param>
      <returns>The interface type or null if it is not implemented by the implementation type</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.GetPatternTestBuilders">
      <summary>Provides builders of pattern tests for the contract verifier.</summary>
      <returns>An enumeration of pattern test builders.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute">
      <summary>
        <para> Attribute for test fixtures that verify the implementation contract of a type implementing the generic <see cref="T:System.IEquatable`1" /> interface. </para>
        <para> The test fixture must implement the <see cref="T:MbUnit.Framework.ContractVerifiers.IEquivalenceClassProvider`1" /> interface which provides a set of equivalence classes of distinct object instances to be used by the contract verifier. </para>
        <para> By default, the verifier will evaluated the behavior of the <see cref="M:System.Object.Equals(System.Object)" />, <see cref="M:System.Object.GetHashCode" />, and <see cref="M:System.IEquatable`1.Equals(`0)" /> methods. It will verify as well the good implementation of the equality (==) and the inequality (!=) operator overloads. Use the named parameters <see cref="P:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute.ImplementsOperatorOverloads" /> to disable that verification. </para>
        <example>The following example declares a simple equatable "Foo" class and tests it using the equality contract verifier. The "Foo" class has a contructor which takes two Int32 arguments. The equality contract is based on the result of the multiplication of those two arguments. Thus, Foo(25, 2) should be equal to (5, 10) because 25 * 2 = 5 * 10. <code>
            public class Foo : IEquatable&lt;Foo&gt;
            {
                private int value;
                
                public Foo(int left, int right)
                {
                    value = left * right;
                }
            
                public override int GetHashCode() 
                {
                    return value.GetHashCode(); 
                }
                
                public override bool Equals(object other) 
                { 
                    return Equals(other as Foo);
                }
                
                public bool Equals(Foo other) 
                { 
                    return (other != null) &amp;&amp; (value == other.value);
                }
            
                public static bool operator ==(Foo left, Foo right) 
                {
                    return (Object.ReferenceEquals(left, null) 
                        &amp;&amp; Object.ReferenceEquals(right, null)) 
                        || (!Object.ReferenceEquals(left, null) 
                        &amp;&amp; left.Equals(right));
                }
                
                public static bool operator !=(Foo left, Foo right) 
                { 
                    return !(left == right);
                }
            }
            
            [VerifyEqualityContract(typeof(Foo)]
            public class FooTest : IEquivalenceClassProvider&lt;Foo&gt;
            {
                public EquivalenceClassCollection&lt;Foo&gt; GetEquivalenceClasses()
                {
                    return new EquivalenceClassCollection&lt;Foo&gt;(
                        new EquivalenceClass&lt;Foo&gt;(
                            new Foo(7, 2));
                        new EquivalenceClass&lt;Foo&gt;(
                            new Foo(25, 2), 
                            new Foo(10, 5));
                        new EquivalenceClass&lt;Foo&gt;(
                            new Foo(3, 4), 
                            new Foo(2, 6), 
                            new Foo(1, 12)));
                }
            }
            </code></example>
        <para> When testing a nullable type such as a reference type, or a value type decorated with <see cref="T:System.Nullable`1" />, it is not necessary to provide a null reference as an object instance to the constructor of the equivalence classes. The contract verifier will check for you that the tested type handles correctly with null references. In the scope of the equality contract, it means that: <list type="bullet"><item>Any null reference should be not equal to any non-null reference.</item><item>Two null references should be equal together.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute.ImplementsOperatorOverloads">
      <summary>
        <para> Determines whether the verifier will evaluate the presence and the behavior of the equality and the inequality operator overloads. The default value is 'true'. </para> Built-in verifications: <list type="bullet"><item>The type has a static equality operator (==) overload which behaves correctly against the provided equivalence classes.</item><item>The type has a static inequality operator (!=) overload which behaves correctly against the provided equivalence classes.</item></list></summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute.GetPatternTestBuilders">
      <summary>Provides builders of pattern tests for the contract verifier.</summary>
      <returns>An enumeration of pattern test builders.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute">
      <summary>
        <para> Attribute for a test fixture that verifies the implementation contract of a custom exception type, derived from <see cref="T:System.Exception" />. </para>
        <para> By default, the verifier will check for the serialization support and the implementation of the 3 recommended constructors. Use the named parameters <see cref="P:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute.ImplementsSerialization" /> and <see cref="P:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute.ImplementsStandardConstructors" /> to modify that behavior. </para>
        <example>The following example declares a simple custom exception, and tests it using the exception contract verifier. <code>
             [Serializable]
             public class MyException : Exception, ISerializable
             {
                 public MyException()
                 {
                 }
            
                 public MyException(string message)
                     : base(message)
                 {
                 }
            
                 public MyException(string message, Exception innerException)
                     : base(message, innerException)
                 {
                 }
            
                 protected MyException(SerializationInfo info, StreamingContext context)
                     : base(info, context)
                 {
                 }
            
                 public override void GetObjectData(SerializationInfo info, StreamingContext context)
                 {
                     base.GetObjectData(info, context);
                 }
             }
             
             [VerifyExceptionContract(typeof(MyException)]
             public class MyExceptionTest
             {
             }
             </code></example>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute.ImplementsSerialization">
      <summary>
        <para> Determines whether the verifier will check for the serialization support. The default value is 'true'. </para>
        <para> Built-in verifications: <list type="bullet"><item>The exception implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface.</item><item>The exception has the <see cref="T:System.SerializableAttribute" /> attribute.</item><item>The exception type has a protected serialization constructor similar to <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute.ImplementsStandardConstructors">
      <summary>
        <para> Determines whether the verifier will check for the presence of the recommended standard constructors. The default value is 'true'. </para>
        <para> Built-in verifications: <list type="bullet"><item>The exception has a default argument-less constructor.</item><item>The exception has a single argument constructor for the message.</item><item>The exception two arguments constructor for the message and an inner exception.</item></list></para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute.GetPatternTestBuilders">
      <summary>Provides builders of pattern tests for the contract verifier.</summary>
      <returns>An enumeration of pattern test builders.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyExceptionContractAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.IEquivalenceClassProvider`1">
      <summary>
        <para> Provides equivalence classes of object instances. </para>
        <para> That interface is one of the two side parts contracts for the equality contract verifier <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute" /> and <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute" />. </para>
        <para> Equivalent classes are used by some contract verifiers such as <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyEqualityContractAttribute" nolink="true" /> and <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyComparisonContractAttribute" nolink="true" /> to check for the correct implementation of object equality or comparison. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.IEquivalenceClassProvider`1.GetEquivalenceClasses">
      <summary>Provides equivalence classes of object instances.</summary>
      <returns>A collection of equivalence classes</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.ExceptionConstructorSpec">
      <summary>Represents the specifications for invoking a exception constructor. TODO: Remove that class once data-driven tests are supported. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.ExceptionConstructorSpec.InnerException">
      <summary>Gets the inner exception parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.ExceptionConstructorSpec.Message">
      <summary>Gets the message parameter.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.ExceptionConstructorSpec.GetInstance(System.Reflection.ConstructorInfo)">
      <summary>Obtains an instance of the exception type based on the parameters specified in the specifications.</summary>
      <param name="ctor" />
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder">
      <summary>Abstract builder of pattern test for a contract verifier. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.TargetType">
      <summary>Gets the target type.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.Build(Gallio.Framework.Pattern.PatternEvaluationScope)">
      <summary>Builds the pattern test, then adds it to the evaluation scope as a new child test.</summary>
      <param name="scope">The scope of the test pattern.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.GetConstructorSignature(System.Type[])">
      <summary>Helper method which returns a string describing the signature of a constructor. Example: ".ctor(SerializationInfo, StreamingContext)"</summary>
      <param name="parameters">The parameter types of the constructor.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.GetEquivalentClasses(System.Type,System.Object)">
      <summary>Casts the instance of the test fixture into a provider of equivalence classes, then returns the resulting collection as an enumeration.</summary>
      <param name="fixtureType">The test fixture type.</param>
      <param name="fixtureInstance">The test fixture instance.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.GetIEquivalenceClassProviderInterface(System.Type)">
      <summary>Returns the target type as a generic IEquatable interface, or a null reference if it does not implement such an interface.</summary>
      <returns>The interface type or a null reference.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.GetInterface(System.Type,System.Type)">
      <summary>Gets the interface of a particular type if it is implemented by another type, otherwise returns null.</summary>
      <param name="implementationType">The implementation type</param>
      <param name="interfaceType">The interface type</param>
      <returns>The interface type or null if it is not implemented by the implementation type</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilder.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderCompares`1">
      <summary>Builder of pattern test for the contract verifiers. The generated test verifies that all a comparison operator/method works as expected.</summary>
      <typeparam name="T">The type of the result returned by the comparison method/operator.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderCompares`1.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderCompares`1.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderEquals">
      <summary>Builder of pattern test for the contract verifiers. The generated test verifies that all an equality operator/method works as expected.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderEquals.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderEquals.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderGetHashCode">
      <summary>Builder of pattern test for the contract verifiers. The generated test verifies that all the equal object instances located in the same equivalence class have the same hash code.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderGetHashCode.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderGetHashCode.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderHasAttribute`1">
      <summary>Builder of pattern test for the contract verifiers. It generates a test that verifies that the target type has the specified attribute.</summary>
      <typeparam name="T">The searched attibute type.</typeparam>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderHasAttribute`1.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderHasAttribute`1.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderHasConstructor">
      <summary>Builder of pattern test for the contract verifiers. It generates a test that verifies that the target type has the specified constructor.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderHasConstructor.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderHasConstructor.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderStandardExceptionConstructor">
      <summary>Builder of pattern test for the contract verifiers. It generates a test which verifies that the target exception type has the specified constructor. The constructor must initialize the exception properties as expected (Message, InnerException) and optionnaly preserve those properties during a roundtrip serialization.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderStandardExceptionConstructor.Name">
      <summary>Gets the name of the pattern test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderStandardExceptionConstructor.RoundTripSerialize(System.Exception)">
      <summary>Performs round-trip serialization of the exception and returns the result.</summary>
      <param name="instance">The exception instance.</param>
      <returns>The instance produced after serialization and deserialization</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Patterns.PatternTestBuilderStandardExceptionConstructor.Run(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Runs the pattern test action.</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.ReflectionException">
      <summary>Indicates that a reflection operation performed by <see cref="T:MbUnit.Framework.Reflection.Reflector" /> failed.</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.Reflector">
      <summary>Helps to test non-public classes and class members.</summary>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String)">
      <summary>Create Instance</summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Create Instance</summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <param name="args">Constructor parameters.</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.Object,System.String)">
      <summary>Get public, non-public, or static field value.</summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>Get field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>Get field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String)">
      <summary>Get public, non-public, or static field value.</summary>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier)">
      <summary>Get field value.</summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier,System.Boolean)">
      <summary>Get field value.</summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.Object,System.String)">
      <summary>Get Property Value</summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.String)">
      <summary>Get Property Value</summary>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Boolean)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String)">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="lookInBase">Speicifies if to search for the method in the base classes or not.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String)">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <param name="access">Specify method access modifier.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.Object,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>Set field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="access">Specify field access modifier.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="T:MbUnit.Framework.Reflection.AccessModifier">
      <summary>Access modifier of a class or class member.</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Public">
      <summary>public</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.NonPublic">
      <summary>protected, internal, private</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Static">
      <summary>static</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Default">
      <summary>default that includes public, protected, internal, private, and static</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.MemberType">
      <summary>Member types of a class.</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Method">
      <summary>Method</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Field">
      <summary>Field or variable</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Property">
      <summary>Property</summary>
    </member>
    <member name="T:MbUnit.Framework.Xml.XmlSerializationAssert">
      <summary>Assertions based on Xml serialization. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.AreEqualAfterRoundTrip``1(``0)">
      <summary>Performs XML serialization then deserialization of the specified object then compares the object to ensure that it equals the original.</summary>
      <typeparam name="T">The type of object to serialize</typeparam>
      <param name="obj">The object</param>
      <returns>The deserialized object after serialization</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.IsXmlSerializable(System.Type)">
      <summary>Asserts that an <see cref="T:System.Xml.Serialization.XmlSerializer" /> can be produced for a <see cref="T:System.Type" />.</summary>
      <param name="t">The type to check</param>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.RoundTrip``1(``0)">
      <summary>Performs XML serialization then deserialization of the specified object.</summary>
      <typeparam name="T">The type of object to serialize</typeparam>
      <param name="obj">The object</param>
      <returns>The deserialized object after serialization</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is null</exception>
    </member>
  </members>
</doc>