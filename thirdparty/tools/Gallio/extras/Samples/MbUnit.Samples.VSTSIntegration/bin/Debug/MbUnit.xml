<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MbUnit</name>
  </assembly>
  <members>
    <member name="T:MbUnit.Core.MbUnitTestFrameworkExtension">
      <summary>A <see cref="T:Gallio.Framework.Pattern.IPatternTestFrameworkExtension" /> that registers MbUnit as a tool when the test assembly contains a reference to the MbUnit assembly.</summary>
    </member>
    <member name="M:MbUnit.Core.MbUnitTestFrameworkExtension.GetReferencedTools(Gallio.Reflection.IAssemblyInfo)">
      <summary>
        <para> Gets information about the tools that are used by the specified test assembly. The tool information will be included in the report as part of the framework node that contains the assembly. </para>
        <para> This method is used by authors of tools that are derived from the <see cref="T:Gallio.Framework.Pattern.PatternTestFramework" /> to provide brand and version information about the tool so that it will be visible to end users. </para>
        <para> If no tools are referenced by the assembly, it will be ignored by the <see cref="T:Gallio.Framework.Pattern.PatternTestExplorer" />. </para>
      </summary>
      <param name="assembly">The test assembly</param>
      <returns>The tool information</returns>
    </member>
    <member name="T:MbUnit.Framework.AnnotationAttribute">
      <summary>Associates an annotation message of the specified type with the code element.</summary>
    </member>
    <member name="T:MbUnit.Framework.ApartmentStateAttribute">
      <summary>
        <para> Sets the apartment state to be used to run the decorated test. </para>
        <para> If no apartment state is specified or if it is <see cref="F:System.Threading.ApartmentState.Unknown" /> the test will inherit the apartment state of its parent. Otherwise it will run in a thread with the specified apartment state. </para>
        <para> The test runner guarantees that the root test runs with the <see cref="F:System.Threading.ApartmentState.STA" /> apartment state. Consequently the apartment state only needs to be overridden to run a test in some mode that may differ from that which it would ordinarily inherit. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ApartmentStateAttribute.ApartmentState">
      <summary>Gets the apartment state to be used to run the decorated test.</summary>
    </member>
    <member name="M:MbUnit.Framework.ApartmentStateAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ArrayAssert">
      <summary>Array Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ArrayAssert.AreEqual(System.Boolean[],System.Boolean[])">
      <summary>Verifies that both array have the same dimension and elements.</summary>
      <param name="expected" />
      <param name="actual" />
    </member>
    <member name="T:MbUnit.Framework.AssemblyFixtureAttribute">
      <summary>
        <para> The assembly fixture attribute is applied to a class that contains setup and teardown methods that are to be applied at the assembly level. Conceptually, the <see cref="T:MbUnit.Framework.AssemblyFixtureAttribute" /> adds new behavior to an assembly-level test fixture that contains all of the test fixtures within the assembly. </para>
        <para> The following attributes are typically used within an assembly fixture: <list type="bullet"><item><see cref="T:MbUnit.Framework.FixtureSetUpAttribute" />: Performs setup activities before any test fixtures within the assembly are executed.</item><item><see cref="T:MbUnit.Framework.FixtureTearDownAttribute" />: Performs teardown activities after all test fixtures within the assembly are executed.</item><item><see cref="T:MbUnit.Framework.SetUpAttribute" />: Performs setup activities before each test fixture within the assembly is executed.</item><item><see cref="T:MbUnit.Framework.TearDownAttribute" />: Performs teardown activities after eacj test fixture within the assembly is executed.</item></list></para>
        <para> It is also possible to use other attributes as with an ordinary <see cref="T:MbUnit.Framework.TestFixtureAttribute" />. An assembly fixture also supports data binding. When data binding is used on an assembly fixture, it will cause all test fixtures within the assembly to run once for each combination of data values used. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
        <para> Consumes a code element and applies its contributions to the scope provided by a containing pattern. </para>
        <para> This method is used to declare new tests, test parameters and other components and add them to a containing test that was defined in some other scope. </para>
        <para> For example, when enumerating test fixtures, the assembly-level pattern will call the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of the primary patterns associated with each type in an assembly. Some of these patterns will create new test fixture objects and add them as children of the containing assembly-level test. They will then call the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)" /> method of each non-primary pattern associated with the type within the scope of the test fixture. Then they will typically recurse into the fixture to apply contributions defined by patterns associated with methods, fields, properties, events, constructors and generic type parameters. </para>
      </summary>
      <param name="containingScope">The containing scope</param>
      <param name="codeElement">The code element to process</param>
      <param name="skipChildren">If true, skips generating child tests. Instead the children may be populated on demand using <see cref="P:Gallio.Framework.Pattern.PatternEvaluationScope.PopulateChildrenChain" />. The implementation may safely ignore the value of this flag so long as subsequent attempts to populate children on demand are idempotent (do nothing or have no adverse side-effects).</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.SetTestSemantics(Gallio.Framework.Pattern.PatternTest,Gallio.Reflection.ITypeInfo)">
      <summary>
        <para> Applies semantic actions to the <see cref="P:Gallio.Framework.Pattern.PatternTest.TestActions" /> member of a test to set the test's runtime behavior. </para>
        <para> This method is called after <see cref="M:Gallio.Framework.Pattern.TestTypePatternAttribute.InitializeTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ITypeInfo)" />. </para>
      </summary>
      <param name="test">The test</param>
      <param name="type">The test type</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ITypeInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="type">The type</param>
    </member>
    <member name="T:MbUnit.Framework.AssemblyResolverAttribute">
      <summary>Registers a custom assembly resolver. This class cannot be inherited.</summary>
    </member>
    <member name="P:MbUnit.Framework.AssemblyResolverAttribute.AssemblyResolverType">
      <summary>Gets the assembly resolver type.</summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyResolverAttribute.Initialize(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IAssemblyInfo)">
      <summary>Performs early initialization for the specified assembly.</summary>
      <param name="frameworkScope">The framework-level scope that will eventually contain the assembly-level test</param>
      <param name="assembly">The assembly to process</param>
    </member>
    <member name="T:MbUnit.Framework.Assert">
      <summary>Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String)">
      <summary>Verifies that two doubles are equal considering a delta. If the expected value is infinity then the delta value is ignored. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
      <param name="message">The message printed out upon failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
      <summary>Verifies that two doubles are equal considering a delta. If the expected value is infinity then the delta value is ignored. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single,System.String)">
      <summary>Verifies that two floats are equal considering a delta. If the expected value is infinity then the delta value is ignored. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="message">The message printed out upon failure</param>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Single,System.Single,System.Single)">
      <summary>Verifies that two floats are equal considering a delta. If the expected value is infinity then the delta value is ignored. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that two decimals are equal. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="message">The message printed out upon failure</param>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that two decimals are equal. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="format">The format of the message to display if the assertion fails, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Decimal,System.Decimal)">
      <summary>Verifies that two decimals are equal. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String)">
      <summary>Verifies that two ints are equal. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="message">The message printed out upon failure</param>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that two ints are equal. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
      <param name="format">The format of the message to display if the assertion fails, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Int32,System.Int32)">
      <summary>Verifies that two ints are equal. If they are not equals then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected value</param>
      <param name="actual">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>Verifies that two objects are equal. Two objects are considered equal if both are null, or if both have the same value. All non-numeric types are compared by using the <c>Equals</c> method. If they are not equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The value that is expected</param>
      <param name="actual">The actual value</param>
      <param name="format">The format of the message to display if the assertion fails, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String)">
      <summary>Verifies that two objects are equal. Two objects are considered equal if both are null, or if both have the same value. All non-numeric types are compared by using the <c>Equals</c> method. If they are not equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The value that is expected</param>
      <param name="actual">The actual value</param>
      <param name="message">The message to display if objects are not equal</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
      <summary>Verifies that two objects are equal. Two objects are considered equal if both are null, or if both have the same value. All non-numeric types are compared by using the <c>Equals</c> method. If they are not equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The value that is expected</param>
      <param name="actual">The actual value</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
      <summary>Asserts that two objects are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the two objects are the same object.</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String)">
      <summary>Asserts that two objects are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the objects are the same</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
      <summary>Asserts that two objects are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Asserts that two ints are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the two objects are the same object.</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32,System.String)">
      <summary>Asserts that two ints are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the objects are the same</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Int32,System.Int32)">
      <summary>Asserts that two ints are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
      <summary>Asserts that two uints are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the two objects are the same object.</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32,System.String)">
      <summary>Asserts that two uints are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the objects are the same</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.UInt32,System.UInt32)">
      <summary>Asserts that two uints are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Asserts that two decimals are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the two objects are the same object.</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal,System.String)">
      <summary>Asserts that two decimals are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the objects are the same</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Decimal,System.Decimal)">
      <summary>Asserts that two decimals are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String,System.Object[])">
      <summary>Asserts that two floats are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the two objects are the same object.</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single,System.String)">
      <summary>Asserts that two floats are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the objects are the same</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Single,System.Single)">
      <summary>Asserts that two floats are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String,System.Object[])">
      <summary>Asserts that two doubles are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the two objects are the same object.</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double,System.String)">
      <summary>Asserts that two doubles are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="message">The message to be displayed when the objects are the same</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.Double,System.Double)">
      <summary>Asserts that two doubles are not equal. If they are equal an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String)">
      <summary>Asserts that two objects refer to the same object. If they are not the same an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="message">The message to be printed when the two objects are not the same object.</param>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
      <summary>Asserts that two objects refer to the same object. If they are not the same an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
      <param name="format">The format of the message to display if the assertion fails, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame(System.Object,System.Object)">
      <summary>Asserts that two objects refer to the same object. If they are not the same an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="expected">The expected object</param>
      <param name="actual">The actual object</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreValueEqual(System.Reflection.PropertyInfo,System.Object,System.Object,System.Object[])">
      <summary>Verifies that the value of the property described by <paramref name="pi" /> is the same in both ojects.</summary>
      <param name="pi">Property describing the value to test</param>
      <param name="expected">Reference object</param>
      <param name="actual">Actual object</param>
      <param name="indices">Index of the property.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int32,System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int16,System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Byte,System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Int64,System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Double,System.Double,System.Double,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.Single,System.Single,System.Single,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable,System.String)">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between(System.IComparable,System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Asserts that <paramref name="test" /> is between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Equals(System.Object,System.Object)">
      <summary>The Equals method throws an AssertionException. This is done to make sure there is no mistake by calling this function.</summary>
      <param name="a" />
      <param name="b" />
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String,System.Object[])">
      <summary>Throws an <see cref="T:MbUnit.Framework.AssertionException" /> with the message that is passed in. This is used by the other Assert functions.</summary>
      <param name="format">The format of the message to initialize the <see cref="T:MbUnit.Framework.AssertionException" /> with.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String)">
      <summary>Throws an <see cref="T:MbUnit.Framework.AssertionException" /> with the message that is passed in. This is used by the other Assert functions.</summary>
      <param name="message">The message to initialize the <see cref="T:MbUnit.Framework.AssertionException" /> with.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail">
      <summary>Throws an <see cref="T:MbUnit.Framework.AssertionException" /> with the message that is passed in. This is used by the other Assert functions.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Double,System.Double)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.Single,System.Single)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
      <summary>Verifies that the first value is greater than the second value. If they are not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be greater</param>
      <param name="arg2">The second value, expected to be less</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double,System.String)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single,System.String)">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly greater than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IDictionary)">
      <summary>Asserts that <paramref name="test" /> is in the dic <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IDictionary,System.String)">
      <summary>Asserts that <paramref name="test" /> is in the dic <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IList)">
      <summary>Asserts that <paramref name="test" /> is in the list <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IList,System.String)">
      <summary>Asserts that <paramref name="test" /> is in the list <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IEnumerable,System.String)">
      <summary>Asserts that <paramref name="test" /> is in the enumerable collection <paramref name="enumerable" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.In(System.Object,System.Collections.IEnumerable)">
      <summary>Asserts that <paramref name="test" /> is in the enumerable collection <paramref name="enumerable" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String)">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The messge to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object may be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The message to display in case of failure</param>
      <param name="args">Array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
      <summary>Assert that a string is empty - that is equal to string.Empty</summary>
      <param name="aString">The string to be tested</param>
      <param name="message">The message to be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String,System.String)">
      <summary>Assert that a string is empty - that is equal to string.Emtpy</summary>
      <param name="aString">The string to be tested</param>
      <param name="message">The message to be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.String)">
      <summary>Assert that a string is empty - that is equal to string.Emtpy</summary>
      <param name="aString">The string to be tested</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection,System.String)">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.ICollection)">
      <summary>Assert that an array,list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>Asserts that a condition is false. If the condition is true the method throws an <see cref="T:MbUnit.Framework.AssertionException" />.</summary>
      <param name="condition">The evaluated condition</param>
      <param name="format">The format of the message to display if the condition is false, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean)">
      <summary>Asserts that a condition is false. If the condition is true the method throws an <see cref="T:MbUnit.Framework.AssertionException" />.</summary>
      <param name="condition">The evaluated condition</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
      <summary>Asserts that an object is an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String)">
      <summary>Asserts that an object is an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object is an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
      <param name="args">An array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
      <summary>Verifies that the double is passed is an <code>NaN</code> value. If the object is not <code>NaN</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="aDouble">The value that is to be tested</param>
      <param name="message">The message to be displayed when the object is not null</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double,System.String)">
      <summary>Verifies that the double is passed is an <code>NaN</code> value. If the object is not <code>NaN</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="aDouble">The object that is to be tested</param>
      <param name="message">The message to be displayed when the object is not null</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNaN(System.Double)">
      <summary>Verifies that the double is passed is an <code>NaN</code> value. If the object is not <code>NaN</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="aDouble">The object that is to be tested</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
      <summary>Asserts that an object may not be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String)">
      <summary>Asserts that an object may not be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The messge to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object may not be assigned a value of a given Type.</summary>
      <param name="expected">The expected Type.</param>
      <param name="actual">The object under examination</param>
      <param name="message">The message to display in case of failure</param>
      <param name="args">Array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
      <summary>Assert that a string is empty - that is equal to string.Emtpy</summary>
      <param name="aString">The string to be tested</param>
      <param name="message">The message to be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String,System.String)">
      <summary>Assert that a string is empty - that is equal to string.Emtpy</summary>
      <param name="aString">The string to be tested</param>
      <param name="message">The message to be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.String)">
      <summary>Assert that a string is empty - that is equal to string.Emtpy</summary>
      <param name="aString">The string to be tested</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection,System.String)">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.ICollection)">
      <summary>Assert that an array,list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
      <summary>Asserts that an object is not an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String)">
      <summary>Asserts that an object is not an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>Asserts that an object is not an instance of a given type.</summary>
      <param name="expected">The expected Type</param>
      <param name="actual">The object being examined</param>
      <param name="message">A message to display in case of failure</param>
      <param name="args">An array of objects to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that the object that is passed in is not equal to <code>null</code> If the object is not <code>null</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="anObject">The object that is to be tested</param>
      <param name="format">The format of the message to display if the assertion fails, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String)">
      <summary>Verifies that the object that is passed in is not equal to <code>null</code> If the object is <code>null</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown with the message that is passed in.</summary>
      <param name="anObject">The object that is to be tested</param>
      <param name="message">The message to initialize the <see cref="T:MbUnit.Framework.AssertionException" /> with.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object)">
      <summary>Verifies that the object that is passed in is not equal to <code>null</code> If the object is not <code>null</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="anObject">The object that is to be tested</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>Verifies that the object that is passed in is equal to <code>null</code> If the object is <code>null</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="anObject">The object that is to be tested</param>
      <param name="format">The format of the message to display if the assertion fails, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String)">
      <summary>Verifies that the object that is passed in is equal to <code>null</code> If the object is <code>null</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown with the message that is passed in.</summary>
      <param name="anObject">The object that is to be tested</param>
      <param name="message">The message to initialize the <see cref="T:MbUnit.Framework.AssertionException" /> with.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object)">
      <summary>Verifies that the object that is passed in is equal to <code>null</code> If the object is <code>null</code> then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="anObject">The object that is to be tested</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>Asserts that a condition is true. If the condition is false the method throws an <see cref="T:MbUnit.Framework.AssertionException" />.</summary>
      <param name="condition">The evaluated condition</param>
      <param name="format">The format of the message to display if the condition is false, containing zero or more format items.</param>
      <param name="args">An <see cref="T:System.Object" /> array containing zero or more objects to format.</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean)">
      <summary>Asserts that a condition is true. If the condition is false the method throws an <see cref="T:MbUnit.Framework.AssertionException" />.</summary>
      <param name="condition">The evaluated condition</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int32,System.Int32)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Int64,System.Int64)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Double,System.Double)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.Single,System.Single)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
      <summary>Verifies that the first value is less than the second value. If it is not, then an <see cref="T:MbUnit.Framework.AssertionException" /> is thrown.</summary>
      <param name="arg1">The first value, expected to be less</param>
      <param name="arg2">The second value, expected to be greater</param>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable)">
      <summary>Verifies that <paramref name="left" /> is lower equal than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that <paramref name="left" /> is lower equal than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerEqualThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is lower equal than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int32,System.Int32,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int16,System.Int16,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Byte,System.Byte,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Int64,System.Int64,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Double,System.Double,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.Single,System.Single,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable,System.String)">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.LowerThan(System.IComparable,System.IComparable,System.String,System.Object[])">
      <summary>Verifies that <paramref name="left" /> is strictly lower than <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int32,System.Int32,System.Int32)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int16,System.Int16,System.Int16)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Byte,System.Byte,System.Byte)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Int64,System.Int64,System.Int64)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Double,System.Double,System.Double)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.Single,System.Single,System.Single)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween(System.IComparable,System.IComparable,System.IComparable)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> between <paramref name="left" /> and <paramref name="right" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IDictionary,System.String)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> in the dic <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IDictionary)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> in the dic <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IList,System.String)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> in the list <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IList)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> in the list <paramref name="list" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IEnumerable,System.String)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> in the enumerable collection <paramref name="enumerable" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotIn(System.Object,System.Collections.IEnumerable)">
      <summary>Asserts that <paramref name="test" /> is <strong>not</strong> in the enumerable collection <paramref name="enumerable" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
      <summary>override the default ReferenceEquals to throw an AssertionException. This implementation makes sure there is no mistake in calling this function as part of Assert.</summary>
      <param name="a" />
      <param name="b" />
    </member>
    <member name="T:MbUnit.Framework.AssertionException">
      <summary>The exception type used to signal MbUnit assertion failures.</summary>
    </member>
    <member name="T:MbUnit.Framework.AuthorAttribute">
      <summary>Associates the author's name and email address with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorEmail">
      <summary>Gets or sets the author's email address or an empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorHomepage">
      <summary>Gets or sets the author's homepage or an empty string if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorName">
      <summary>Gets or sets the author's name.</summary>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.BindAttribute">
      <summary>The bind attribute overrides the default binding rules for a test parameter by specifying a different data source, a binding path or an index. At most one such attribute may appear on any given test parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Index">
      <summary>Gets the binding index, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Path">
      <summary>Gets the binding path, or null if none.</summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Source">
      <summary>
        <para> Gets or sets the name of the data source to bind, or null to bind the default data source for the test parameter. </para>
        <para> The default source for a test parameter is the anonymous data source defined within the scope of the test parameter or by its enclosing test. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.BindAttribute.DecorateTestParameter(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ISlotInfo)">
      <summary>
        <para> Applies decorations to a <see cref="T:Gallio.Framework.Pattern.PatternTestParameter" />. </para>
        <para> A typical use of this method is to augment the test parameter with additional metadata or to add additional behaviors to the test parameter. </para>
      </summary>
      <param name="slotScope">The slot scope</param>
      <param name="slot">The slot</param>
    </member>
    <member name="T:MbUnit.Framework.CategoryAttribute">
      <summary>Associates a category name with a test fixture, test method, test parameter or other test component. The category name can be used to classify tests and build test suites of related tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.CategoryAttribute.CategoryName">
      <summary>Gets the category name.</summary>
    </member>
    <member name="M:MbUnit.Framework.CategoryAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.CollectionAssert">
      <summary>Assertion helper for the <see cref="T:System.Collections.ICollection" /> class. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type)">
      <summary>Asserts that all items contained in collection are of the type specified by expectedType.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="expectedType">System.Type that all objects in collection must be instances of</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String)">
      <summary>Asserts that all items contained in collection are of the type specified by expectedType.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="expectedType">System.Type that all objects in collection must be instances of</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.ICollection,System.Type,System.String,System.Object[])">
      <summary>Asserts that all items contained in collection are of the type specified by expectedType.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="expectedType">System.Type that all objects in collection must be instances of</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection)">
      <summary>Asserts that all items contained in collection are not equal to null.</summary>
      <param name="collection">ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String)">
      <summary>Asserts that all items contained in collection are not equal to null.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that all items contained in collection are not equal to null.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection)">
      <summary>Ensures that every object contained in collection exists within the collection once and only once.</summary>
      <param name="collection">ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String)">
      <summary>Ensures that every object contained in collection exists within the collection once and only once.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.ICollection,System.String,System.Object[])">
      <summary>Ensures that every object contained in collection exists within the collection once and only once.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreCountEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.Count" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreCountEqual(System.Int32,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.Count" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreElementsEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
      <summary>Verifies that <paramref name="expected" /> and <paramref name="actual" /> are equal collections. Element count and element wize equality is verified.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that <paramref name="expected" /> and <paramref name="actual" /> are equal collections. Element count and element wize equality is verified.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreIsSynchronizedEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreIsSynchronizedEqual(System.Boolean,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that expected and actual are not exactly equal.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer)">
      <summary>Asserts that expected and actual are not exactly equal. If comparer is not null then it will be used to compare the objects.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that expected and actual are not exactly equal.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String)">
      <summary>Asserts that expected and actual are not exactly equal. If comparer is not null then it will be used to compare the objects.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that expected and actual are not exactly equal.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.ICollection,System.Collections.ICollection,System.Collections.IComparer,System.String,System.Object[])">
      <summary>Asserts that expected and actual are not exactly equal. If comparer is not null then it will be used to compare the objects.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="comparer">The IComparer to use in comparing objects from each ICollection</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that expected and actual are not equivalent.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that expected and actual are not equivalent.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that expected and actual are not equivalent.</summary>
      <param name="expected">The first ICollection of objects to be considered</param>
      <param name="actual">The second ICollection of objects to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreSyncRootEqual(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot" /> of <paramref name="expected" /> and <paramref name="actual" /> are equal.</summary>
      <param name="expected">Instance containing the expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.AreSyncRootEqual(System.Object,System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.SyncRoot" /> of <paramref name="actual" /> is equal to <paramref name="expected" />.</summary>
      <param name="expected">Expected value.</param>
      <param name="actual">Instance containing the tested value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object)">
      <summary>Asserts that collection contains actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object to be found within collection</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String)">
      <summary>Asserts that collection contains actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object to be found within collection</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.Contains(System.Collections.ICollection,System.Object,System.String,System.Object[])">
      <summary>Asserts that collection contains actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object to be found within collection</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object)">
      <summary>Asserts that collection does not contain actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object that cannot exist within collection</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String)">
      <summary>Asserts that collection does not contain actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object that cannot exist within collection</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.ICollection,System.Object,System.String,System.Object[])">
      <summary>Asserts that collection does not contain actual as an item.</summary>
      <param name="collection">ICollection of objects to be considered</param>
      <param name="actual">Object that cannot exist within collection</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsCountCorrect(System.Collections.ICollection)">
      <summary>Verifies that the <see cref="P:System.Collections.ICollection.Count" /> property is synchronized with the number of iterated elements.</summary>
      <param name="col">Collection to test</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> is a null reference (Nothing in Visual Basic) </exception>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that subset is not a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that subset is not a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that subset is not a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsNotSynchronized(System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> is false.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection)">
      <summary>Asserts that subset is a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String)">
      <summary>Asserts that subset is a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.ICollection,System.Collections.ICollection,System.String,System.Object[])">
      <summary>Asserts that subset is a subset of superset.</summary>
      <param name="subset">The ICollection subset to be considered</param>
      <param name="superset">The ICollection superset to be considered</param>
      <param name="message">The message that will be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.CollectionAssert.IsSynchronized(System.Collections.ICollection)">
      <summary>Verifies that the property value <see cref="P:System.Collections.ICollection.IsSynchronized" /> is true.</summary>
      <param name="actual">Instance containing the expected value.</param>
    </member>
    <member name="T:MbUnit.Framework.ColumnAttribute">
      <summary>
        <para> Provides a column of literal values as a data source. </para>
        <para> This attribute is equivalent to providing a sequence of values using <see cref="T:MbUnit.Framework.RowAttribute" /> with 1 element in each. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ColumnAttribute.Values">
      <summary>Gets the array of values in the column.</summary>
    </member>
    <member name="M:MbUnit.Framework.ColumnAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.CombinatorialJoinAttribute">
      <summary>
        <para> Sets the join strategy of a test to be combinatorial. </para>
        <para> The test will be executed using all possible combinations of values from each data source. </para>
        <para> If there are two data sources, A and B with values A1, A2, B1 and B2, then the test will be run four times with inputs: (A1, B1), (A1, B2), (A2, B1) and (A2, B2). </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.CombinatorialJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.ContentAttribute">
      <summary>An abstract base class for data source attributes that obtain contents from a local file, manifest resource, or inline data. At most one location type may be used. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.Contents">
      <summary>Gets or sets the inline data contents as a string.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.FilePath">
      <summary>Gets or sets the path of a local file relative to the current working directory from which the file contents should be read.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.IsDynamic">
      <summary>Returns true if the contents are dynamic, or false if they are static. Static contents can only change if the test assembly is recompiled.</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourcePath">
      <summary>
        <para> Gets or sets the path of a manifest resource from which the contents should be read. The path will be resolved within the assembly containing the <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" /> type or the test fixture type if none if provided. </para>
        <para> During resolution, a resource name is constructed from the resource path by translating backslashes to periods. If the named resource is found within the scoped assembly manifest, it is used. Otherwise, the name is prepended with the scoped type's namespace and second lookup is attempted. If this final attempt fails, then an error is raised at runtime. </para>
        <para> Examples: <list type="bullet"><item>If the <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" nolink="true" /> is <c>MyNamespace.MyType</c> within assembly <c>MyAssembly.dll</c> and if <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> is <c>"Resources\Image.gif"</c>, then resolution will first check whether <c>Resources.Image.gif</c> in <c>MyAssembly.dll</c> is a valid resource. If not found, it will consider <c>MyNamespace.Resources.Image.gif</c>. If still not found, then a runtime error will be raised.</item><item>If no <see cref="P:MbUnit.Framework.ContentAttribute.ResourceScope" nolink="true" /> is provided, then the containing test fixture type will be used as the resource scope. The above resolution strategy still applies.</item></list></para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourceScope">
      <summary>
        <para> Gets or sets a <see cref="T:System.Type" /> that is used to locate the assembly and namespace within which to resolve a manifest resource in combination with the <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> property. </para>
        <para> If no value is specified, the test fixture type is used as the resource scope. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.GetDataLocationName">
      <summary>
        <para> Gets the name of the location that is providing the data, or null if none. </para>
        <para> The name will be the filename or resource path if specified, or a special locale-aware string (such as "&lt;inline&gt;") if the contents were specified inline via the <see cref="P:MbUnit.Framework.ContentAttribute.Contents" /> property. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenStream(Gallio.Reflection.ICodeElementInfo)">
      <summary>Opens the contents as a stream.</summary>
      <param name="codeElement">The code element to which the attribute was applied</param>
      <returns>The stream</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenTextReader(Gallio.Reflection.ICodeElementInfo)">
      <summary>Opens the contents as a text reader.</summary>
      <param name="codeElement">The code element to which the attribute was applied</param>
      <returns>The text reader</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.CsvDataAttribute">
      <summary>
        <para> Provides data from Comma Separated Values contents. </para>
        <para> If the CSV document has a header, then it is interpreted as the names of the columns. Columns with names in brackets, such as "[ExpectedException]", are interpreted as containing metadata values associated with the named key. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.CommentPrefix">
      <summary>
        <para> Gets or sets a character that indicates that a line in the source represents a comment. May be set to '\0' (null) to disable comment handling. </para>
        <para> Comment lines are excluded from the record set. </para>
      </summary>
      <value>The default value is '#' (pound).</value>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.FieldDelimiter">
      <summary>Gets or sets the field delimiter character.</summary>
      <value>The default value is ',' (comma).</value>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.HasHeader">
      <summary>Gets or sets whether the CSV document has a header that should be used to provide aliases for indexed columns.</summary>
      <value>The default value is 'false' which indicates that the file does not have a header.</value>
    </member>
    <member name="M:MbUnit.Framework.CsvDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.DataAttribute">
      <summary>The abstract base type for MbUnit attributes that contribute values to data sources along with metadata such a description or expected exception type. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.Description">
      <summary>Gets or sets a description of the values provided by the data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.ExpectedException">
      <summary>Gets or sets the type of exception that should be thrown when the values provided by the data source are consumed by test.</summary>
    </member>
    <member name="M:MbUnit.Framework.DataAttribute.GetMetadata">
      <summary>Gets the metadata for the data source.</summary>
      <returns>The metadata keys and values</returns>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAssemblyAttribute">
      <summary>Creates a dependency from this test assembly, test fixture or test method on all tests in some other test assembly. If any test in the other test assembly test fails then this test will not run. Moreover, the dependency forces this test to run after those it depends upon.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAssemblyAttribute.TestAssemblyName">
      <summary>Gets the dependent test assembly name.</summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAssemblyAttribute.GetDependency(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Gets the code element that declares the tests on which this test should depend.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <returns>The code element representing the dependency</returns>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAttribute">
      <summary>Creates a dependency from this test assembly, test fixture or test method on some other test fixture or test method. If the other test fixture or test method fails then this test will not run. Moreover, the dependency forces this test to run after those it depends upon.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestFixtureType">
      <summary>Gets the dependent test fixture type, or null if the dependency is on another test method of this test fixture.</summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestMethodName">
      <summary>Gets the dependent test method name, or null if the dependency is on the whole test fixture.</summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.GetDependency(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Gets the code element that declares the tests on which this test should depend.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <returns>The code element representing the dependency</returns>
    </member>
    <member name="T:MbUnit.Framework.DescriptionAttribute">
      <summary>Associates a description with a test fixture, test method, test parameter or other test component. The description provides useful documentation to users when browsing the tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.DescriptionAttribute.Description">
      <summary>Gets or sets the description.</summary>
    </member>
    <member name="M:MbUnit.Framework.DescriptionAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentException" />. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentNullException" />. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentOutOfRangeExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="T:MbUnit.Framework.ExpectedExceptionAttribute">
      <summary>Declares that the associated test is expected to throw an exception of a particular type. The expected contents of the exception message may optionally be specified.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
      <summary>Gets the expected exception type.</summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.Message">
      <summary>Gets or sets the expected exception message, or null if none specified.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.DecorateMethodTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies decorations to a method-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="methodScope">The method scope</param>
      <param name="method">The method</param>
    </member>
    <member name="T:MbUnit.Framework.ExplicitAttribute">
      <summary>
        <para> Indicates that a test should only be run explicitly. The test will still appear in the test tree but it will not run and it will not appear in the test results unless it is explicitly selected for execution. </para>
        <para> A test is considered to be explicitly selected when the filter used to run the tests matches the test or its descendants but none of its ancestors. For example, if the filter matches a test case but not its containing test fixture then the test case will be deemed to be explicitly selected. Otherwise the test case will be implicitly selected by virtue of the fact that the filter matched one of its ancestors. </para>
        <para> This attribute can be used to exclude from normal execution any tests that are particularly expensive or require manual supervision by an operator. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.ExplicitAttribute.Reason">
      <summary>Gets the reason that the test should only run explicitly.</summary>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.FactoryAttribute">
      <summary>
        <para> Specifies a factory member that will provide values for a data-driven test. The factory may be an instance or static member of the fixture class or a static member of some other class. </para>
        <para> Refer to <see cref="T:Gallio.Framework.Data.FactoryDataSet" /> and <see cref="T:Gallio.Framework.Data.FactoryKind" /> for more information about how the factory data set works and the kinds of factories that are supported. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.ColumnCount">
      <summary>Gets or sets the number of columns produced by the factory, or 0 if unknown. Defaults to 0.</summary>
      <value>The number of columns</value>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is less than zero</exception>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Kind">
      <summary>Gets or sets the kind of the factory. Defaults to <see cref="F:Gallio.Framework.Data.FactoryKind.Auto" />.</summary>
      <value>The kind of the factory.</value>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.MemberName">
      <summary>Gets the factory member name, never null.</summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Type">
      <summary>Gets the declaring type of the factory, or null if it is assumed to be the fixture class.</summary>
    </member>
    <member name="M:MbUnit.Framework.FactoryAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureInitializerAttribute">
      <summary>
        <para> The fixture initializer attribute is applied to a method that is to be invoked after a fixture instance has been created to complete its initialization. </para>
        <para> This attribute provides a mechanism for completing the initialization of a fixture if the work cannot be completed entirely within the constructor. For example, data binding might be used to set fields and property values of the fixture instance. Consequently post-construction initialization may be required. </para>
        <para>
          <see cref="T:MbUnit.Framework.FixtureInitializerAttribute" /> allows initialization to occur earlier in the test lifecycle than <see cref="T:MbUnit.Framework.FixtureSetUpAttribute" />. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.DecorateContainingScope(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing <see cref="T:Gallio.Framework.Pattern.PatternTest" />.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureSetUpAttribute">
      <summary>The fixture set up attribute is applied to a method that is to be invoked when a fixture instance is being set up before any of its tests are executed.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.DecorateContainingScope(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing <see cref="T:Gallio.Framework.Pattern.PatternTest" />.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="T:MbUnit.Framework.FixtureTearDownAttribute">
      <summary>The fixture tear down attribute is applied to a method that is to be invoked when a fixture instance is being torn down after all of its tests have been executed.</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.DecorateContainingScope(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)">
      <summary>Applies decorations to the containing <see cref="T:Gallio.Framework.Pattern.PatternTest" />.</summary>
      <param name="containingScope">The containing scope</param>
      <param name="method">The method to process</param>
    </member>
    <member name="T:MbUnit.Framework.GenericAssert">
      <summary>Assertion class This class cannot be inherited.</summary>
    </member>
    <member name="M:MbUnit.Framework.GenericAssert.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.Object[])">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.GenericAssert.IsEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.GenericAssert.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>Assert that an array,list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
    </member>
    <member name="M:MbUnit.Framework.GenericAssert.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.Object[])">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
      <param name="args">Arguments to be used in formatting the message</param>
    </member>
    <member name="M:MbUnit.Framework.GenericAssert.IsNotEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
      <summary>Assert that an array, list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
      <param name="message">The message to be displayed on failure</param>
    </member>
    <member name="M:MbUnit.Framework.GenericAssert.IsNotEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>Assert that an array,list or other collection is empty</summary>
      <param name="collection">An array, list or other collection implementing ICollection</param>
    </member>
    <member name="T:MbUnit.Framework.HeaderAttribute">
      <summary>Defines names as aliases for the columns in an indexed data source such as those that have been populated by <see cref="T:MbUnit.Framework.RowAttribute" /> or <see cref="T:MbUnit.Framework.ColumnAttribute" />. The names may subsequently be used in data binding expressions in place of their corresponding column indices.</summary>
    </member>
    <member name="P:MbUnit.Framework.HeaderAttribute.ColumnNames">
      <summary>Gets the array of column names.</summary>
    </member>
    <member name="M:MbUnit.Framework.HeaderAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.IgnoreAttribute">
      <summary>
        <para> Indicates that a test is to be ignored by the framework and will not be run. The test will still appear in test reports along with the reason that it was ignored, if provided. </para>
        <para> This attribute can be used to disable tests that are broken or expensive without commenting them out or removing them from the source code. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.IgnoreAttribute.Reason">
      <summary>Gets the reason that the test has been ignored, or an empty string if none.</summary>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ImportanceAttribute">
      <summary>Associates a <see cref="T:MbUnit.Framework.Importance" /> with a test fixture, test method, test parameter or other test component.</summary>
    </member>
    <member name="P:MbUnit.Framework.ImportanceAttribute.Importance">
      <summary>Gets or sets the importance.</summary>
    </member>
    <member name="M:MbUnit.Framework.ImportanceAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.InterimAssert">
      <summary>This is an interim assertion class intended to be used within MbUnit v3 tests. We'll refactor these assertions when the new constraint framework is developed. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.AreDistinct``1(``0[])">
      <summary>Asserts that all of the values in the objects array are distinct by equality and hashcode.</summary>
      <typeparam name="T">The type of object</typeparam>
      <param name="items">The objects</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="items" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.DoesNotThrow(Gallio.Action)">
      <summary>Asserts that the specified block of code does not throw an exception.</summary>
      <param name="action">The block of code to run</param>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.DoesNotThrow(Gallio.Action,System.String)">
      <summary>Asserts that the specified block of code does not throw an exception.</summary>
      <param name="action">The block of code to run</param>
      <param name="message">The failure message</param>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.DoesNotThrow(Gallio.Action,System.String,System.Object[])">
      <summary>Asserts that the specified block of code does not throw an exception.</summary>
      <param name="action">The block of code to run</param>
      <param name="messageFormat">The failure message format string</param>
      <param name="messageArgs">The failure message arguments</param>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.WithKeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``0,``1,``2})">
      <summary>Evaluates an assertion with matched pairs drawn from each dictionary that have identical keys. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TExpectedValue">The expected value type</typeparam>
      <typeparam name="TActualValue">The expected value type</typeparam>
      <param name="expectedValues">The enumeration of expected values</param>
      <param name="actualValues">The enumeration of actual values</param>
      <param name="assertion">The assertion to evaluate over all pairs</param>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.WithKeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Action{``1,``2})">
      <summary>Evaluates an assertion with matched pairs drawn from each dictionary that have identical keys. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TKey">The key type</typeparam>
      <typeparam name="TExpectedValue">The expected value type</typeparam>
      <typeparam name="TActualValue">The actual value type</typeparam>
      <param name="expectedValues">The enumeration of expected values</param>
      <param name="actualValues">The enumeration of actual values</param>
      <param name="assertion">The assertion to evaluate over all pairs</param>
    </member>
    <member name="M:MbUnit.Framework.InterimAssert.WithPairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Action{``0,``1})">
      <summary>Evaluates an assertion with matched pairs drawn from each collection. Fails if the collections have different sizes or if one is null but not the other.</summary>
      <typeparam name="TExpected">The expected value type</typeparam>
      <typeparam name="TActual">The actual value type</typeparam>
      <param name="expectedValues">The enumeration of expected values</param>
      <param name="actualValues">The enumeration of actual values</param>
      <param name="assertion">The assertion to evaluate over all pairs</param>
    </member>
    <member name="T:MbUnit.Framework.JoinAttribute">
      <summary>An abstract class for attributes that specify the join strategy of a test. This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Processes a code element and applies contributes to the scope of this pattern. The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of a primary pattern applied to this code element. </para>
        <para> This method is used by patterns to decorate tests and test parameters that have been declared by primary patterns. </para>
        <para> For example, the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)" /> method will typically be called by another pattern that has just created a new test based on the associated code element, such as a test method. The method then has the opportunity to modify the test to add metadata, change its name, add new behaviors, and so on. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element to process</param>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.MetadataAttribute">
      <summary>Associates custom metadata with a test fixture, test method, test parameter or other test component. The metadata can be used for documentation, classification or dynamic customization of tests.</summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataKey">
      <summary>Gets the metadata key.</summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataValue">
      <summary>Gets the metadata value.</summary>
    </member>
    <member name="M:MbUnit.Framework.MetadataAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.NameAttribute">
      <summary>Overrides the name of a test or test parameter.</summary>
    </member>
    <member name="P:MbUnit.Framework.NameAttribute.Name">
      <summary>Gets the overridden name.</summary>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Processes a code element and applies contributes to the scope of this pattern. The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo,System.Boolean)" /> method of a primary pattern applied to this code element. </para>
        <para> This method is used by patterns to decorate tests and test parameters that have been declared by primary patterns. </para>
        <para> For example, the <see cref="M:Gallio.Framework.Pattern.IPattern.Process(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)" /> method will typically be called by another pattern that has just created a new test based on the associated code element, such as a test method. The method then has the opportunity to modify the test to add metadata, change its name, add new behaviors, and so on. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element to process</param>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Validate(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>Verifies that the attribute is being used correctly.</summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly</exception>
    </member>
    <member name="T:MbUnit.Framework.PairwiseJoinAttribute">
      <summary>
        <para> Sets the join strategy of a test to be pairwise. </para>
        <para> The test will be executed using values drawn from each data source and combined so that all possible pairings of values from each data source are produced. This constraint vastly reduces the number of combinations because we only consider all interactions among pairs of variables rather than among all variables at once. This strategy still provides a high degree of variability among combinations and has a high likelihood of finding bugs while incurring much less cost than testing all possible combinations. </para>
        <para> If there are three data sources, A, B and C with values A1, A2, B1, B2, C1 and C2 then the test will be run four times with inputs: (A1, B1, C1), (A2, B2, C1), (A1, B2, C2), (A2, B1, C2). Compare this with the eight times that a standard cross-product combinatorial join strategy would have required. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.PairwiseJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.ParameterAttribute">
      <summary>
        <para> Declares that a property, field, method parameter, constructor parameter, generic type parameter or generic method parameter represents a test parameter. </para>
        <para> This attribute is optional for a method parameter, constructor parameter, generic type parameter or generic method parameter. For a property or field, this attribute is required unless the property or field has at least one associated data source, in which case the attribute can be omitted. </para>
      </summary>
    </member>
    <member name="T:MbUnit.Framework.PendingAttribute">
      <summary>
        <para> Indicates that a test has pending prerequisites so it will not be run. The test will still appear in test reports along with an explanation of the reason it it pending, if provided. </para>
        <para> This attribute can be used to disable tests that cannot run because the subject under test is missing certain prerequisite functionality. It may also serve as a placeholder for test that have yet to be implemented. </para>
      </summary>
    </member>
    <member name="P:MbUnit.Framework.PendingAttribute.Reason">
      <summary>Gets the reason that the test is pending.</summary>
    </member>
    <member name="M:MbUnit.Framework.PendingAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.ReflectionAssert">
      <summary>Reflection Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasConstructor(System.Type,System.Type[])">
      <summary>Asserts that the type has a public instance constructor with a signature defined by parameters.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasConstructor(System.Type,System.Reflection.BindingFlags,System.Type[])">
      <summary>Asserts that the type has a constructor, with the specified bindind flags, with a signature defined by parameters.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasDefaultConstructor(System.Type)">
      <summary>Asserts that the type has a default public constructor</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasField(System.Type,System.String)">
      <summary>Asserts that the type has a public field method with a signature defined by parameters.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasField(System.Type,System.Reflection.BindingFlags,System.String)">
      <summary>Asserts that the type has a field, with the specified bindind flags, with a signature defined by parameters.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasMethod(System.Type,System.String,System.Type[])">
      <summary>Asserts that the type has a public instance method with a signature defined by parameters.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.HasMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[])">
      <summary>Asserts that the type has a method, with the specified bindind flags, with a signature defined by parameters.</summary>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.IsAssignableFrom(System.Type,System.Type)">
      <summary>Asserts whether an instance of the <paramref name="parent" /> can be assigned from an instance of <paramref name="child" />.</summary>
      <param name="parent">Parent <see cref="T:System.Type" /> instance.</param>
      <param name="child">Child <see cref="T:System.Type" /> instance.</param>
    </member>
    <member name="M:MbUnit.Framework.ReflectionAssert.IsInstanceOf(System.Type,System.Object)">
      <summary>Asserts whether <paramref name="child" /> is an instance of the <paramref name="type" />.</summary>
      <param name="type">
        <see cref="T:System.Type" /> instance.</param>
      <param name="child">Child instance.</param>
    </member>
    <member name="T:MbUnit.Framework.RepeatAttribute">
      <summary>This attribute decorates a test method and causes it to be invoked repeatedly.</summary>
    </member>
    <member name="M:MbUnit.Framework.RepeatAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.RowAttribute">
      <summary>Provides a row of literal values as a data source.</summary>
    </member>
    <member name="P:MbUnit.Framework.RowAttribute.Values">
      <summary>Gets the array of values in the row.</summary>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.PopulateDataSource(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Framework.Data.DataSource,Gallio.Reflection.ICodeElementInfo)">
      <summary>Populates the data source with the contributions of this attribute.</summary>
      <param name="scope">The scope</param>
      <param name="dataSource">The data source</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.SecurityAssert">
      <summary>Security Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.IsAuthenticated(System.Security.Principal.IIdentity)">
      <summary>Asserts that <paramref name="identity" /> is authenticated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.IsNotAuthenticated(System.Security.Principal.IIdentity)">
      <summary>Asserts that <paramref name="identity" /> is not authenticated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowIsAuthenticated">
      <summary>Asserts that the current windows identity is authenticated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowIsNotAuthenticated">
      <summary>Asserts that the current windows identity is not authenticated.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInAdministrator">
      <summary>Asserts that the current windows identity is in <see cref="F:System.Security.Principal.WindowsBuiltInRole.Administrator" /> role.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInGuest">
      <summary>Asserts that the current windows identity is in <see cref="F:System.Security.Principal.WindowsBuiltInRole.Guest" /> role.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInPowerUser">
      <summary>Asserts that the current windows identity is in <see cref="F:System.Security.Principal.WindowsBuiltInRole.PowerUser" /> role.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInRole(System.Security.Principal.WindowsBuiltInRole)">
      <summary>Asserts that the current windows identity is in <param name="role" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.SecurityAssert.WindowsIsInUser">
      <summary>Asserts that the current windows identity is in <see cref="F:System.Security.Principal.WindowsBuiltInRole.User" /> role.</summary>
    </member>
    <member name="T:MbUnit.Framework.SequentialJoinAttribute">
      <summary>
        <para> Sets the join strategy of a test to be sequential. </para>
        <para> The test will be executed using values drawn from each data source and combined sequentially with elements from each data source chosen in order. </para>
        <para> If there are two data sources, A and B with values A1, A2, B1 and B2, then the test will be run twice with inputs: (A1, B1) and (A2, B2). </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialJoinAttribute.GetJoinStrategy">
      <summary>Gets the join strategy to use.</summary>
      <returns>The join strategy</returns>
    </member>
    <member name="T:MbUnit.Framework.SetUpAttribute">
      <summary>The setup attribute is applied to a method that is to be invoked before each test in a fixture executes. The method will run once for each test. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.StringAssert">
      <summary>String Assertion class This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.AreEqualIgnoreCase(System.String,System.String)">
      <summary>Asserts that two strings are equal, ignoring the case</summary>
      <param name="s1">Expected string</param>
      <param name="s2">Actual string</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.DoesNotContain(System.String,System.Char[])">
      <summary>Asserts the string does not contain c</summary>
      <param name="s">String to test.</param>
      <param name="anyOf">Variable list of characeters.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.FullMatch(System.String,System.String)">
      <summary>Asserts the regular expression reg makes a full match on s</summary>
      <param name="s">String to test.</param>
      <param name="reg">Regular expression</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Asserts the regular expression regex makes a full match on <paramref name="s" />.</summary>
      <param name="s">String to test.</param>
      <param name="regex">Regular expression</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.IsEmpty(System.String)">
      <summary>Asserts that the string is non null and empty</summary>
      <param name="s">String to test.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.IsNonEmpty(System.String)">
      <summary>Asserts that the string is non null and non empty</summary>
      <param name="s">String to test.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.Like(System.String,System.String)">
      <summary>Asserts the regular expression reg makes a match on s</summary>
      <param name="s">String to test.</param>
      <param name="reg">Regular expression</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.Like(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Asserts the regular expression regex makes a match on s</summary>
      <param name="s">String to test.</param>
      <param name="regex">A <see cref="T:System.Text.RegularExpressions.Regex" /> instance.</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.NotLike(System.String,System.String)">
      <summary>Asserts the regular expression reg makes a match on s</summary>
      <param name="s">String to test.</param>
      <param name="reg">Regular expression</param>
    </member>
    <member name="M:MbUnit.Framework.StringAssert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
      <summary>Asserts the regular expression regex makes a match on s</summary>
      <param name="s">String to test.</param>
      <param name="regex">A <see cref="T:System.Text.RegularExpressions.Regex" /> instance.</param>
    </member>
    <member name="T:MbUnit.Framework.TearDownAttribute">
      <summary>The tear down attribute is applied to a method that is to be invoked after each test in a fixture executes. The method will run once for each test. This class cannot be inherited.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestAttribute">
      <summary>
        <para> The test attribute is applied to a method that represents a single test case within a fixture. By default, if the method throws an unexpected exception, the test will be deemed to have failed. Otherwise, the test will pass. </para>
        <para> The default behavior may be modified by test decorator attributes that may alter the execution environment of the test, catch and reinterpret any exceptions it throws, or impose additional constraints upon its execution. </para>
        <para> Output from the test, such as text written to the console, is captured by the framework and will be included in the test report. Additional information can also be logged during test execution using the <see cref="T:Gallio.Framework.Log" /> class. </para>
      </summary>
    </member>
    <member name="M:MbUnit.Framework.TestAttribute.SetTestSemantics(Gallio.Framework.Pattern.PatternTest,Gallio.Reflection.IMethodInfo)">
      <summary>
        <para> Applies semantic actions to the <see cref="P:Gallio.Framework.Pattern.PatternTest.TestActions" /> member of a test to set the test's runtime behavior. </para>
        <para> This method is called after <see cref="M:Gallio.Framework.Pattern.TestMethodPatternAttribute.InitializeTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.IMethodInfo)" />. </para>
      </summary>
      <param name="test">The test</param>
      <param name="method">The test method</param>
    </member>
    <member name="T:MbUnit.Framework.TestDecoratorAttribute">
      <summary>
        <para> A test decorator applies actions to be performed around the initialization, setup, execution, teardown and disposal lifecycle of a test (in that order). </para>
        <para> This abstract class provides a convenient way to implement new test decorators of your own. If you need more control over how the test is decorated, you may prefer subclassing <see cref="T:Gallio.Framework.Pattern.TestDecoratorPatternAttribute" /> directly instead. </para>
        <para> When multiple test decorators are applied to a test, they are installed in order according to the <see cref="P:Gallio.Framework.Pattern.DecoratorPatternAttribute.Order" /> property. </para>This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Dispose(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Disposes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Executes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Initialize(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Initializes the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.SetUp(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Sets up the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.TearDown(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>Tears down the test.</summary>
      <param name="testInstanceState">The test instance state, not null</param>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureAttribute">
      <summary>The test fixture attribute is applied to a class that contains a suite of related test cases. If an error occurs while initializing the fixture or if at least one of the test cases within the fixture fails, then the fixture itself will be deemed to have failed. Otherwise the fixture will pass. Output from the fixture, such as text written to the console, is captured by the framework and will be included in the test report.</summary>
    </member>
    <member name="T:MbUnit.Framework.TestsOnAttribute">
      <summary>Associates the name of the type under test with a test fixture, test method, test parameter or other test component. The type under test helps to describe which type is primarily being exercised by the test so that we can quickly identify which tests to run after making changes to a given type.</summary>
    </member>
    <member name="P:MbUnit.Framework.TestsOnAttribute.TypeName">
      <summary>Gets the full name or assembly qualified name of the type under test.</summary>
      <value>The name of the type under test as obtained by <see cref="P:System.Type.FullName" /> or <see cref="P:System.Type.AssemblyQualifiedName" />.</value>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.Apply(Gallio.Model.MetadataMap)">
      <summary>Applies metadata contributions the metadata map of a test component.</summary>
      <param name="metadata">The metadata map</param>
    </member>
    <member name="T:MbUnit.Framework.ThreadedRepeatAttribute">
      <summary>This attribute decorates a test method and causes it to be invoked repeatedly on multiple concurrent threads.</summary>
    </member>
    <member name="M:MbUnit.Framework.ThreadedRepeatAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.TimeoutAttribute">
      <summary>Sets the maximum amount of time that a test or fixture is permitted to run.</summary>
    </member>
    <member name="P:MbUnit.Framework.TimeoutAttribute.TimeoutSeconds">
      <summary>Gets the timeout in seconds.</summary>
    </member>
    <member name="M:MbUnit.Framework.TimeoutAttribute.DecorateTest(Gallio.Framework.Pattern.PatternEvaluationScope,Gallio.Reflection.ICodeElementInfo)">
      <summary>
        <para> Applies decorations to a method or type-level <see cref="T:Gallio.Framework.Pattern.PatternTest" />. </para>
        <para> A typical use of this method is to augment the test with additional metadata or to add additional behaviors to the test. </para>
      </summary>
      <param name="scope">The scope</param>
      <param name="codeElement">The code element</param>
    </member>
    <member name="T:MbUnit.Framework.Importance">
      <summary>Specifies the test's relative importance which can be used for classifying tests to be executed.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Critical">
      <summary>Critical importance.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Severe">
      <summary>Severe importance. Less important than <see cref="F:MbUnit.Framework.Importance.Critical" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Serious">
      <summary>Serious importance. Less important than <see cref="F:MbUnit.Framework.Importance.Severe" />.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Default">
      <summary>Default importance.</summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.NoOneReallyCaresAbout">
      <summary>Not important.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ContractVerifier`1">
      <summary>
        <para> An abstract base class for test fixtures that verify contracts. </para>
        <para> A contract verifier embodied tests designed to ensure that a particular type meets a particular contract. To use a contract verifier, create a subclass of the appropriate subclass of <see cref="T:MbUnit.Framework.ContractVerifiers.ContractVerifier`1" /> and implement the required methods. The subclass will be a test fixture that verifies the specified contract. </para>This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
      <typeparam name="T">The type that implements the contract that is to be verified</typeparam>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1">
      <summary>
        <para> Verifies the equality contract for an equatable type. </para>
        <para> Built-in verifications: <list type="bullet"><item>Equality and difference according to <see cref="M:System.Object.Equals(System.Object)" /></item><item>Equality and difference according to <see cref="M:System.IEquatable`1.Equals(`0)" /></item><item>Equality and difference according to the '==' and '!=' operators</item><item>Equal objects have the same hashcode according to <see cref="M:System.Object.GetHashCode" /></item></list></para>This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.EquatableEquals">
      <summary>Verifies <see cref="M:System.IEquatable`1.Equals(`0)" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.GetDistinctInstances">
      <summary>
        <para> Gets distinct instances of <typeparamref name="T" />. </para>
        <para> Each instance within the sequence should be distinct from all of the others within the same sequence. However, this method should return sequences that are equal to each other each time. </para>
        <para> The sequence should contain at least 2 distinct instances. </para>
      </summary>
      <returns>The distinct instances</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.ObjectEquals">
      <summary>Verifies <see cref="M:System.Object.Equals(System.Object)" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.ObjectGetHashCode">
      <summary>Verifies <see cref="M:System.Object.GetHashCode" />.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.OperatorEquals">
      <summary>Verifies the "==" operator.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.OperatorNotEquals">
      <summary>Verifies the "!=" operator.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.VerifyEqualityContract(Gallio.Func{`0,`0,System.Boolean})">
      <summary>Ensures that an equality operations is correctly implemented.</summary>
      <param name="equals">The equality operation</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContractVerifier`1.VerifyHashCodeContract(Gallio.Func{`0,System.Int32})">
      <summary>Ensures that a hash code operation is correctly implemented.</summary>
      <param name="getHashCode">The hash code operation</param>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1">
      <summary>
        <para> Verifies the equality contract for an exception type. </para>
        <para> Built-in verifications: <list type="bullet"><item>The exception has the <see cref="T:System.SerializableAttribute" /> attribute.</item><item>The exception type has a protected serialization constructor similar to <see cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />.</item><item>If the exception type has standard constructors similar to <see cref="M:System.Exception.#ctor" />, <see cref="M:System.Exception.#ctor(System.String)" /> or <see cref="M:System.Exception.#ctor(System.String,System.Exception)" />, then verifies that they are well defined. If any of these constructions are not intended to be defined, override the appropriate test method to disable it.</item></list></para>This class is <see langword="abstract" /> and so cannot be instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.AssertMessageAndInnerExceptionPreservedByRoundTripSerialization(`0)">
      <summary>Verifies that the <see cref="P:System.Exception.Message" /> and <see cref="P:System.Exception.InnerException" /> properties are preserved by round-trip serialization.</summary>
      <param name="instance">The instance</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.CreateInstanceUsingDefaultConstructor">
      <summary>Creates an exception instance using the default constructor. Returns null if not supported.</summary>
      <returns>The instance, or null if not supported</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.CreateInstanceUsingStandardMessageAndInnerExceptionConstructor(System.String,System.Exception)">
      <summary>Creates an exception instance using the standard 2 argument constructor with a message string and inner exception. Returns null if not supported.</summary>
      <param name="message">The message text</param>
      <param name="innerException">The inner exception</param>
      <returns>The instance, or null if not supported</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.CreateInstanceUsingStandardMessageConstructor(System.String)">
      <summary>Creates an exception instance using the standard 1 argument constructor with a message string. Returns null if not supported.</summary>
      <param name="message">The message text</param>
      <returns>The instance, or null if not supported</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.DefaultConstructorIsWellDefined">
      <summary>Ensures that the exception has a well-defined default constructor.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.HasSerializableAttribute">
      <summary>Ensures that the exception has a <see cref="T:System.SerializableAttribute" /> attribute.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.HasSerializationConstructor">
      <summary>Ensures that the exception has a non-public serialization constructor.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.RoundTripSerialize(`0)">
      <summary>Performs round-trip serialization of the exception and returns the result.</summary>
      <param name="instance">The instance</param>
      <returns>The instance produced after serialization and deserialization</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.StandardMessageAndInnerExceptionConstructorIsWellDefined(System.String,System.Boolean)">
      <summary>Ensures that the exception has a well-defined two argument message and inner exception constructor.</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContractVerifier`1.StandardMessageConstructorIsWellDefined(System.String)">
      <summary>Ensures that the exception has a well-defined single argument message constructor.</summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.IDistinctInstanceProvider`1">
      <summary>Provides distinct instances of a particular type.</summary>
      <typeparam name="T">The type of object to provide</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.IDistinctInstanceProvider`1.GetDistinctInstances">
      <summary>
        <para> Gets distinct instances of <typeparamref name="T" />. </para>
        <para> Each instance within the sequence should be distinct from all of the others within the same sequence. However, this method should return sequences that are equal to each other each time. </para>
        <para> The sequence should contain at least 2 distinct instances. </para>
      </summary>
      <returns>The distinct instances</returns>
    </member>
    <member name="T:MbUnit.Framework.Reflection.ReflectionException">
      <summary>Indicates that a reflection operation performed by <see cref="T:MbUnit.Framework.Reflection.Reflector" /> failed.</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.Reflector">
      <summary>Helps to test non-public classes and class members.</summary>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String)">
      <summary>Create Instance</summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String,System.Object[])">
      <summary>Create Instance</summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <param name="args">Constructor parameters.</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.Object,System.String)">
      <summary>Get public, non-public, or static field value.</summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>Get field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>Get field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String)">
      <summary>Get public, non-public, or static field value.</summary>
      <param name="fieldName">Field name.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier)">
      <summary>Get field value.</summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier,System.Boolean)">
      <summary>Get field value.</summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.Object,System.String)">
      <summary>Get Property Value</summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.String)">
      <summary>Get Property Value</summary>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Boolean)">
      <summary>Get Property Value</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String)">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call</param>
      <param name="lookInBase">Speicifies if to search for the method in the base classes or not.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String)">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object[])">
      <summary>Execute a NonPublic method with arguments on a object</summary>
      <param name="methodName">Method to call</param>
      <param name="access">Specify method access modifier.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.Object,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>Set field value.</summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>Set field value.</summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="access">Specify field access modifier.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>Set Property value.</summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="T:MbUnit.Framework.Reflection.AccessModifier">
      <summary>Access modifier of a class or class member.</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Public">
      <summary>public</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.NonPublic">
      <summary>protected, internal, private</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Static">
      <summary>static</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Default">
      <summary>default that includes public, protected, internal, private, and static</summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.MemberType">
      <summary>Member types of a class.</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Method">
      <summary>Method</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Field">
      <summary>Field or variable</summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Property">
      <summary>Property</summary>
    </member>
    <member name="T:MbUnit.Framework.Xml.XmlSerializationAssert">
      <summary>Assertions based on Xml serialization. This is a <see langword="static class" /> and so cannot be inherited or instantiated.</summary>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.AreEqualAfterRoundTrip``1(``0)">
      <summary>Performs XML serialization then deserialization of the specified object then compares the object to ensure that it equals the original.</summary>
      <typeparam name="T">The type of object to serialize</typeparam>
      <param name="obj">The object</param>
      <returns>The deserialized object after serialization</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is null</exception>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.IsXmlSerializable(System.Type)">
      <summary>Asserts that an <see cref="T:System.Xml.Serialization.XmlSerializer" /> can be produced for a <see cref="T:System.Type" />.</summary>
      <param name="t">The type to check</param>
    </member>
    <member name="M:MbUnit.Framework.Xml.XmlSerializationAssert.RoundTrip``1(``0)">
      <summary>Performs XML serialization then deserialization of the specified object.</summary>
      <typeparam name="T">The type of object to serialize</typeparam>
      <param name="obj">The object</param>
      <returns>The deserialized object after serialization</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="obj" /> is null</exception>
    </member>
  </members>
</doc>